<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
<declaration>
// Place global declarations here.
clock globalTime;
const int INFINITE_TIME = -1;
const int N_REACTANTS = 90;
broadcast chan reacting[N_REACTANTS];

//R0 = ATF2
int R0 := 0;
const int R0Levels := 100;

//R1 = ATF2 PTM
int R1 := 1;
const int R1Levels := 100;

//R2 = ATF2 prot
int R2 := 7;
const int R2Levels := 100;

//R3 = ATF4
int R3 := 67;
const int R3Levels := 100;

//R4 = Akt
int R4 := 0;
const int R4Levels := 100;

//R5 = Akt PTM
int R5 := 0;
const int R5Levels := 100;

//R6 = Akt prot
int R6 := 0;
const int R6Levels := 100;

//R7 = B-catenin
int R7 := 0;
const int R7Levels := 100;

//R8 = BMP
int R8 := 0;
const int R8Levels := 100;

//R9 = Bcat dummy value must be 1
int R9 := 100;
const int R9Levels := 100;

//R10 = Bcatleftcfcomplex
int R10 := 0;
const int R10Levels := 100;

//R11 = C/EBPb dummy
int R11 := 0;
const int R11Levels := 100;

//R12 = CCND1
int R12 := 63;
const int R12Levels := 100;

//R13 = CCND1 PTM
int R13 := 80;
const int R13Levels := 100;

//R14 = CCND1 dummy must be 1
int R14 := 100;
const int R14Levels := 100;

//R15 = CCND1 prot
int R15 := 80;
const int R15Levels := 100;

//R16 = Col-II
int R16 := 88;
const int R16Levels := 100;

//R17 = Col-X
int R17 := 0;
const int R17Levels := 100;

//R18 = DC canonical dummy
int R18 := 100;
const int R18Levels := 100;

//R19 = DC degradation dummy
int R19 := 100;
const int R19Levels := 100;

//R21 = DC dummy must be 1
int R21 := 100;
const int R21Levels := 100;

//R20 = DC dummy must be 1
int R20 := 100;
const int R20Levels := 100;

//R23 = Dlx5
int R23 := 0;
const int R23Levels := 100;

//R24 = Dlx5 PTM
int R24 := 6;
const int R24Levels := 100;

//R25 = Dlx5 prot
int R25 := 0;
const int R25Levels := 100;

//R26 = Dsh
int R26 := 0;
const int R26Levels := 100;

//R27 = ERK1/2
int R27 := 0;
const int R27Levels := 100;

//R28 = Ets1
int R28 := 2;
const int R28Levels := 100;

//R29 = Ets1 PTM
int R29 := 45;
const int R29Levels := 100;

//R30 = Ets1 prot
int R30 := 7;
const int R30Levels := 100;

//R31 = FGF
int R31 := 0;
const int R31Levels := 100;

//R32 = FGFR1
int R32 := 0;
const int R32Levels := 100;

//R33 = FGFR1 PTM
int R33 := 0;
const int R33Levels := 100;

//R34 = FGFR1 prot
int R34 := 0;
const int R34Levels := 100;

//R35 = FGFR3
int R35 := 0;
const int R35Levels := 100;

//R36 = FGFR3 PTM
int R36 := 0;
const int R36Levels := 100;

//R37 = FGFR3 prot
int R37 := 100;
const int R37Levels := 100;

//R39 = Frizzled - LRP 5/6
int R39 := 0;
const int R39Levels := 100;

//R41 = GSK
int R41 := 100;
const int R41Levels := 100;

//R42 = GSK dummy
int R42 := 0;
const int R42Levels := 100;

//R43 = GSK dummy must be one
int R43 := 100;
const int R43Levels := 100;

//R44 = Gli2
int R44 := 28;
const int R44Levels := 100;

//R45 = HDAC4
int R45 := 33;
const int R45Levels := 100;

//R46 = HIF-2a
int R46 := 0;
const int R46Levels := 100;

//R47 = IGF-1
int R47 := 100;
const int R47Levels := 100;

//R48 = IGF-1R
int R48 := 21;
const int R48Levels := 100;

//R49 = IGF-1R PTM
int R49 := 100;
const int R49Levels := 100;

//R50 = IGF-1R prot
int R50 := 21;
const int R50Levels := 100;

//R51 = Ihh
int R51 := 43;
const int R51Levels := 100;

//R52 = Lef/Tcf
int R52 := 0;
const int R52Levels := 100;

//R53 = Lef/Tcf PTM
int R53 := 0;
const int R53Levels := 100;

//R54 = Lef/Tcf dummy must be 1
int R54 := 100;
const int R54Levels := 100;

//R55 = Lef/Tcf prot
int R55 := 44;
const int R55Levels := 100;

//R56 = MEF2C
int R56 := 0;
const int R56Levels := 100;

//R57 = MEF2C PTM
int R57 := 0;
const int R57Levels := 100;

//R58 = MEF2C prot
int R58 := 0;
const int R58Levels := 100;

//R59 = MMP13
int R59 := 0;
const int R59Levels := 100;

//R60 = Msx2
int R60 := 6;
const int R60Levels := 100;

//R61 = Msx2 PTM
int R61 := 100;
const int R61Levels := 100;

//R62 = Msx2 dummy must be 1
int R62 := 100;
const int R62Levels := 100;

//R63 = Msx2 prot
int R63 := 7;
const int R63Levels := 100;

//R64 = NFkb
int R64 := 0;
const int R64Levels := 100;

//R65 = Nkx3.2
int R65 := 100;
const int R65Levels := 100;

//R66 = PI3K
int R66 := 0;
const int R66Levels := 100;

//R67 = PI3K PTM
int R67 := 14;
const int R67Levels := 100;

//R68 = PI3K prot
int R68 := 0;
const int R68Levels := 100;

//R69 = PKA
int R69 := 100;
const int R69Levels := 100;

//R70 = PP2A
int R70 := 100;
const int R70Levels := 100;

//R71 = PPR
int R71 := 62;
const int R71Levels := 100;

//R72 = PPR PTM
int R72 := 77;
const int R72Levels := 100;

//R73 = PPR prot
int R73 := 81;
const int R73Levels := 100;

//R74 = PTHrP
int R74 := 78;
const int R74Levels := 100;

//R75 = R-smad
int R75 := 0;
const int R75Levels := 100;

//R76 = Ras
int R76 := 0;
const int R76Levels := 100;

//R77 = Runx2
int R77 := 0;
const int R77Levels := 100;

//R78 = Runx2 PTM
int R78 := 0;
const int R78Levels := 100;

//R79 = Runx2 prot
int R79 := 0;
const int R79Levels := 100;

//R80 = STAT1
int R80 := 7;
const int R80Levels := 100;

//R81 = Smad3
int R81 := 6;
const int R81Levels := 100;

//R82 = Smad7
int R82 := 3;
const int R82Levels := 100;

//R83 = Smadcomplex
int R83 := 0;
const int R83Levels := 100;

//R84 = Sox9
int R84 := 100;
const int R84Levels := 100;

//R85 = Sox9 PTM
int R85 := 100;
const int R85Levels := 100;

//R86 = Sox9 prot
int R86 := 100;
const int R86Levels := 100;

//R87 = TGFb
int R87 := 28;
const int R87Levels := 100;

//R88 = Wnt
int R88 := 0;
const int R88Levels := 100;

//R89 = Wnt Addition
int R89 := 1;
const int R89Levels := 1;

//R90 = dEF-1
int R90 := 2;
const int R90Levels := 100;

//R91 = destruction complex
int R91 := 100;
const int R91Levels := 100;

//R92 = p38
int R92 := 19;
const int R92Levels := 100;


typedef struct {
	int[-99980001, 99980001] b;
	int e;
} double_t;

const double_t zero = {0, 0};
const double_t INFINITE_TIME_DOUBLE = {-1000, -3}; //INFINITE_TIME (-1) translated into double

typedef int[-1, 1073741822] time_t;

typedef struct {
	time_t T;
} timeActivity;

//Reaction R76 (Ras) --> R27 (ERK1/2)
timeActivity R76_R27;
const double_t k_R76_R27 = {9090, -7};

//Reaction R27 (ERK1/2) --| R41 (GSK)
timeActivity R27_R41;
const double_t k_R27_R41 = {0, -6};

//Reaction R10 (Bcatleftcfcomplex) --> R88 (Wnt)
timeActivity R10_R88;
const double_t k_R10_R88 = {6090, -8};

//Reaction R29 (Ets1 PTM) --| R29 (Ets1 PTM)
timeActivity R29_R29;
const double_t k_R29_R29 = {9090, -7};

//Reaction R77 (Runx2) --> R58 (MEF2C prot)
timeActivity R77_R58;
const double_t k_R77_R58 = {6090, -8};

//Reaction R29 (Ets1 PTM) --> R28 (Ets1)
timeActivity R29_R28;
const double_t k_R29_R28 = {0, -6};

//Reaction R77 (Runx2) --> R59 (MMP13)
timeActivity R77_R59;
const double_t k_R77_R59 = {2273, -8};

//Reaction R39 (Frizzled - LRP 5/6) --| R39 (Frizzled - LRP 5/6)
timeActivity R39_R39;
const double_t k_R39_R39 = {9090, -7};

//Reaction R77 (Runx2) --> R55 (Lef/Tcf prot)
timeActivity R77_R55;
const double_t k_R77_R55 = {4000, -8};

//Reaction R84 (Sox9) --| R53 (Lef/Tcf PTM)
timeActivity R84_R53;
const double_t k_R84_R53 = {9090, -7};

//Reaction R77 (Runx2) --> R51 (Ihh)
timeActivity R77_R51;
const double_t k_R77_R51 = {6090, -8};

//Reaction R41 (GSK) --| R45 (HDAC4)
timeActivity R41_R45;
const double_t k_R41_R45 = {6060, -7};

//Reaction R24 (Dlx5 PTM) --> R23 (Dlx5)
timeActivity R24_R23;
const double_t k_R24_R23 = {0, -6};

//Reaction R24 (Dlx5 PTM) --| R24 (Dlx5 PTM)
timeActivity R24_R24;
const double_t k_R24_R24 = {9090, -7};

//Reaction R57 (MEF2C PTM) --| R57 (MEF2C PTM)
timeActivity R57_R57;
const double_t k_R57_R57 = {9090, -7};

//Reaction R57 (MEF2C PTM) --> R56 (MEF2C)
timeActivity R57_R56;
const double_t k_R57_R56 = {0, -6};

//Reaction R14 (CCND1 dummy must be 1) --> R13 (CCND1 PTM)
timeActivity R14_R13;
const double_t k_R14_R13 = {9090, -7};

//Reaction R61 (Msx2 PTM) --> R60 (Msx2)
timeActivity R61_R60;
const double_t k_R61_R60 = {0, -6};

//Reaction R61 (Msx2 PTM) --| R61 (Msx2 PTM)
timeActivity R61_R61;
const double_t k_R61_R61 = {9090, -7};

//Reaction R91 (destruction complex) --| R7 (B-catenin)
timeActivity R91_R7;
const double_t k_R91_R7 = {9090, -7};

//Reaction R91 (destruction complex) --| R91 (destruction complex)
timeActivity R91_R91;
const double_t k_R91_R91 = {9090, -7};

//Reaction R48 (IGF-1R) --| R48 (IGF-1R)
timeActivity R48_R48;
const double_t k_R48_R48 = {9090, -7};

//Reaction R41 (GSK) --| R41 (GSK)
timeActivity R41_R41;
const double_t k_R41_R41 = {9090, -7};

//Reaction R47 (IGF-1) --> R69 (PKA)
timeActivity R47_R69;
const double_t k_R47_R69 = {6060, -7};

//Reaction R2 (ATF2 prot) AND R1 (ATF2 PTM) --> R0 (ATF2)
timeActivity R2_R1_R0;
const double_t k_R2_R1_R0 = {9090, -9};

//Reaction R56 (MEF2C) --> R17 (Col-X)
timeActivity R56_R17;
const double_t k_R56_R17 = {6090, -8};

//Reaction R84 (Sox9) --> R37 (FGFR3 prot)
timeActivity R84_R37;
const double_t k_R84_R37 = {9090, -8};

//Reaction R39 (Frizzled - LRP 5/6) --> R26 (Dsh)
timeActivity R39_R26;
const double_t k_R39_R26 = {9090, -7};

//Reaction R18 (DC canonical dummy) --| R18 (DC canonical dummy)
timeActivity R18_R18;
const double_t k_R18_R18 = {9090, -7};

//Reaction R80 (STAT1) --| R13 (CCND1 PTM)
timeActivity R80_R13;
const double_t k_R80_R13 = {4550, -7};

//Reaction R13 (CCND1 PTM) --| R13 (CCND1 PTM)
timeActivity R13_R13;
const double_t k_R13_R13 = {9090, -7};

//Reaction R30 (Ets1 prot) AND R29 (Ets1 PTM) --> R28 (Ets1)
timeActivity R30_R29_R28;
const double_t k_R30_R29_R28 = {9090, -9};

//Reaction R77 (Runx2) --> R31 (FGF)
timeActivity R77_R31;
const double_t k_R77_R31 = {6090, -8};

//Reaction R13 (CCND1 PTM) --> R12 (CCND1)
timeActivity R13_R12;
const double_t k_R13_R12 = {0, -6};

//Reaction R58 (MEF2C prot) --| R58 (MEF2C prot)
timeActivity R58_R58;
const double_t k_R58_R58 = {9090, -8};

//Reaction R46 (HIF-2a) --| R46 (HIF-2a)
timeActivity R46_R46;
const double_t k_R46_R46 = {9090, -8};

//Reaction R77 (Runx2) --> R34 (FGFR1 prot)
timeActivity R77_R34;
const double_t k_R77_R34 = {9090, -8};

//Reaction R23 (Dlx5) --| R23 (Dlx5)
timeActivity R23_R23;
const double_t k_R23_R23 = {9090, -7};

//Reaction R62 (Msx2 dummy must be 1) --> R61 (Msx2 PTM)
timeActivity R62_R61;
const double_t k_R62_R61 = {9090, -7};

//Reaction R56 (MEF2C) --> R25 (Dlx5 prot)
timeActivity R56_R25;
const double_t k_R56_R25 = {9090, -8};

//Reaction R75 (R-smad) --> R17 (Col-X)
timeActivity R75_R17;
const double_t k_R75_R17 = {6090, -8};

//Reaction R32 (FGFR1) --| R32 (FGFR1)
timeActivity R32_R32;
const double_t k_R32_R32 = {9090, -7};

//Reaction R41 (GSK) --> R29 (Ets1 PTM)
timeActivity R41_R29;
const double_t k_R41_R29 = {4040, -7};

//Reaction R15 (CCND1 prot) --| R15 (CCND1 prot)
timeActivity R15_R15;
const double_t k_R15_R15 = {9090, -8};

//Reaction R60 (Msx2) --| R24 (Dlx5 PTM)
timeActivity R60_R24;
const double_t k_R60_R24 = {9090, -7};

//Reaction R60 (Msx2) --| R25 (Dlx5 prot)
timeActivity R60_R25;
const double_t k_R60_R25 = {9090, -8};

//Reaction R54 (Lef/Tcf dummy must be 1) --> R55 (Lef/Tcf prot)
timeActivity R54_R55;
const double_t k_R54_R55 = {4000, -8};

//Reaction R71 (PPR) --| R71 (PPR)
timeActivity R71_R71;
const double_t k_R71_R71 = {9090, -7};

//Reaction R37 (FGFR3 prot) AND R36 (FGFR3 PTM) --> R35 (FGFR3)
timeActivity R37_R36_R35;
const double_t k_R37_R36_R35 = {9090, -9};

//Reaction R70 (PP2A) --| R5 (Akt PTM)
timeActivity R70_R5;
const double_t k_R70_R5 = {4550, -7};

//Reaction R35 (FGFR3) --| R35 (FGFR3)
timeActivity R35_R35;
const double_t k_R35_R35 = {9090, -7};

//Reaction R41 (GSK) --| R13 (CCND1 PTM)
timeActivity R41_R13;
const double_t k_R41_R13 = {1518, -7};

//Reaction R1 (ATF2 PTM) --| R1 (ATF2 PTM)
timeActivity R1_R1;
const double_t k_R1_R1 = {9090, -7};

//Reaction R84 (Sox9) --> R16 (Col-II)
timeActivity R84_R16;
const double_t k_R84_R16 = {4000, -8};

//Reaction R4 (Akt) --| R4 (Akt)
timeActivity R4_R4;
const double_t k_R4_R4 = {9090, -7};

//Reaction R1 (ATF2 PTM) --> R0 (ATF2)
timeActivity R1_R0;
const double_t k_R1_R0 = {0, -6};

//Reaction R78 (Runx2 PTM) --> R77 (Runx2)
timeActivity R78_R77;
const double_t k_R78_R77 = {0, -6};

//Reaction R78 (Runx2 PTM) --| R78 (Runx2 PTM)
timeActivity R78_R78;
const double_t k_R78_R78 = {9090, -7};

//Reaction R71 (PPR) --> R69 (PKA)
timeActivity R71_R69;
const double_t k_R71_R69 = {6060, -7};

//Reaction R87 (TGFb) --> R50 (IGF-1R prot)
timeActivity R87_R50;
const double_t k_R87_R50 = {9090, -8};

//Reaction R81 (Smad3) --> R63 (Msx2 prot)
timeActivity R81_R63;
const double_t k_R81_R63 = {1291, -7};

//Reaction R70 (PP2A) --> R45 (HDAC4)
timeActivity R70_R45;
const double_t k_R70_R45 = {9090, -7};

//Reaction R70 (PP2A) --| R42 (GSK dummy)
timeActivity R70_R42;
const double_t k_R70_R42 = {9090, -7};

//Reaction R65 (Nkx3.2) --> R86 (Sox9 prot)
timeActivity R65_R86;
const double_t k_R65_R86 = {3000, -8};

//Reaction R74 (PTHrP) --> R72 (PPR PTM)
timeActivity R74_R72;
const double_t k_R74_R72 = {9090, -7};

//Reaction R86 (Sox9 prot) --| R86 (Sox9 prot)
timeActivity R86_R86;
const double_t k_R86_R86 = {9090, -8};

//Reaction R15 (CCND1 prot) AND R13 (CCND1 PTM) --> R12 (CCND1)
timeActivity R15_R13_R12;
const double_t k_R15_R13_R12 = {9090, -9};

//Reaction R27 (ERK1/2) --| R83 (Smadcomplex)
timeActivity R27_R83;
const double_t k_R27_R83 = {7910, -7};

//Reaction R74 (PTHrP) --| R74 (PTHrP)
timeActivity R74_R74;
const double_t k_R74_R74 = {9090, -8};

//Reaction R71 (PPR) --> R65 (Nkx3.2)
timeActivity R71_R65;
const double_t k_R71_R65 = {6090, -8};

//Reaction R92 (p38) --> R24 (Dlx5 PTM)
timeActivity R92_R24;
const double_t k_R92_R24 = {5790, -7};

//Reaction R27 (ERK1/2) --| R81 (Smad3)
timeActivity R27_R81;
const double_t k_R27_R81 = {2636, -7};

//Reaction R69 (PKA) --> R78 (Runx2 PTM)
timeActivity R69_R78;
const double_t k_R69_R78 = {9090, -7};

//Reaction R21 (DC dummy must be 1) --> R19 (DC degradation dummy)
timeActivity R21_R19;
const double_t k_R21_R19 = {1364, -6};

//Reaction R81 (Smad3) --> R2 (ATF2 prot)
timeActivity R81_R2;
const double_t k_R81_R2 = {1291, -7};

//Reaction R69 (PKA) --> R70 (PP2A)
timeActivity R69_R70;
const double_t k_R69_R70 = {9090, -7};

//Reaction R83 (Smadcomplex) --| R80 (STAT1)
timeActivity R83_R80;
const double_t k_R83_R80 = {9090, -7};

//Reaction R44 (Gli2) --> R15 (CCND1 prot)
timeActivity R44_R15;
const double_t k_R44_R15 = {4000, -8};

//Reaction R81 (Smad3) --| R57 (MEF2C PTM)
timeActivity R81_R57;
const double_t k_R81_R57 = {1291, -6};

//Reaction R83 (Smadcomplex) --> R82 (Smad7)
timeActivity R83_R82;
const double_t k_R83_R82 = {2455, -8};

//Reaction R69 (PKA) --> R74 (PTHrP)
timeActivity R69_R74;
const double_t k_R69_R74 = {3000, -8};

//Reaction R81 (Smad3) --> R1 (ATF2 PTM)
timeActivity R81_R1;
const double_t k_R81_R1 = {0, -6};

//Reaction R83 (Smadcomplex) --| R83 (Smadcomplex)
timeActivity R83_R83;
const double_t k_R83_R83 = {9090, -7};

//Reaction R65 (Nkx3.2) --| R79 (Runx2 prot)
timeActivity R65_R79;
const double_t k_R65_R79 = {0, -6};

//Reaction R6 (Akt prot) --| R6 (Akt prot)
timeActivity R6_R6;
const double_t k_R6_R6 = {9090, -8};

//Reaction R7 (B-catenin) AND R52 (Lef/Tcf) --> R10 (Bcatleftcfcomplex)
timeActivity R7_R52_R10;
const double_t k_R7_R52_R10 = {9090, -9};

//Reaction R28 (Ets1) --> R90 (dEF-1)
timeActivity R28_R90;
const double_t k_R28_R90 = {6090, -8};

//Reaction R27 (ERK1/2) --> R78 (Runx2 PTM)
timeActivity R27_R78;
const double_t k_R27_R78 = {7910, -7};

//Reaction R84 (Sox9) --| R84 (Sox9)
timeActivity R84_R84;
const double_t k_R84_R84 = {9090, -7};

//Reaction R81 (Smad3) --> R74 (PTHrP)
timeActivity R81_R74;
const double_t k_R81_R74 = {4270, -8};

//Reaction R77 (Runx2) --| R85 (Sox9 PTM)
timeActivity R77_R85;
const double_t k_R77_R85 = {9090, -7};

//Reaction R84 (Sox9) --> R86 (Sox9 prot)
timeActivity R84_R86;
const double_t k_R84_R86 = {3000, -8};

//Reaction R12 (CCND1) --| R81 (Smad3)
timeActivity R12_R81;
const double_t k_R12_R81 = {3027, -7};

//Reaction R12 (CCND1) --| R78 (Runx2 PTM)
timeActivity R12_R78;
const double_t k_R12_R78 = {9090, -7};

//Reaction R56 (MEF2C) --| R56 (MEF2C)
timeActivity R56_R56;
const double_t k_R56_R56 = {9090, -7};

//Reaction R72 (PPR PTM) --| R72 (PPR PTM)
timeActivity R72_R72;
const double_t k_R72_R72 = {9090, -7};

//Reaction R72 (PPR PTM) --> R71 (PPR)
timeActivity R72_R71;
const double_t k_R72_R71 = {0, -6};

//Reaction R70 (PP2A) --| R27 (ERK1/2)
timeActivity R70_R27;
const double_t k_R70_R27 = {9090, -7};

//Reaction R64 (NFkb) --> R16 (Col-II)
timeActivity R64_R16;
const double_t k_R64_R16 = {4000, -8};

//Reaction R84 (Sox9) --| R78 (Runx2 PTM)
timeActivity R84_R78;
const double_t k_R84_R78 = {9090, -7};

//Reaction R69 (PKA) --> R85 (Sox9 PTM)
timeActivity R69_R85;
const double_t k_R69_R85 = {9090, -7};

//Reaction R69 (PKA) --> R86 (Sox9 prot)
timeActivity R69_R86;
const double_t k_R69_R86 = {3000, -8};

//Reaction R84 (Sox9) --> R74 (PTHrP)
timeActivity R84_R74;
const double_t k_R84_R74 = {3000, -8};

//Reaction R81 (Smad3) --> R85 (Sox9 PTM)
timeActivity R81_R85;
const double_t k_R81_R85 = {1291, -6};

//Reaction R83 (Smadcomplex) --> R58 (MEF2C prot)
timeActivity R83_R58;
const double_t k_R83_R58 = {6090, -8};

//Reaction R81 (Smad3) --> R82 (Smad7)
timeActivity R81_R82;
const double_t k_R81_R82 = {3450, -8};

//Reaction R83 (Smadcomplex) --> R57 (MEF2C PTM)
timeActivity R83_R57;
const double_t k_R83_R57 = {9090, -7};

//Reaction R84 (Sox9) --> R73 (PPR prot)
timeActivity R84_R73;
const double_t k_R84_R73 = {6090, -8};

//Reaction R77 (Runx2) --> R79 (Runx2 prot)
timeActivity R77_R79;
const double_t k_R77_R79 = {4000, -8};

//Reaction R77 (Runx2) --| R77 (Runx2)
timeActivity R77_R77;
const double_t k_R77_R77 = {9090, -7};

//Reaction R4 (Akt) --> R64 (NFkb)
timeActivity R4_R64;
const double_t k_R4_R64 = {6060, -7};

//Reaction R19 (DC degradation dummy) --| R19 (DC degradation dummy)
timeActivity R19_R19;
const double_t k_R19_R19 = {9090, -7};

//Reaction R81 (Smad3) --| R81 (Smad3)
timeActivity R81_R81;
const double_t k_R81_R81 = {9090, -7};

//Reaction R55 (Lef/Tcf prot) --| R55 (Lef/Tcf prot)
timeActivity R55_R55;
const double_t k_R55_R55 = {9090, -8};

//Reaction R32 (FGFR1) --> R80 (STAT1)
timeActivity R32_R80;
const double_t k_R32_R80 = {4040, -7};

//Reaction R27 (ERK1/2) --| R27 (ERK1/2)
timeActivity R27_R27;
const double_t k_R27_R27 = {9090, -7};

//Reaction R32 (FGFR1) --> R76 (Ras)
timeActivity R32_R76;
const double_t k_R32_R76 = {4040, -7};

//Reaction R27 (ERK1/2) --> R29 (Ets1 PTM)
timeActivity R27_R29;
const double_t k_R27_R29 = {5270, -7};

//Reaction R50 (IGF-1R prot) --| R50 (IGF-1R prot)
timeActivity R50_R50;
const double_t k_R50_R50 = {9090, -8};

//Reaction R9 (Bcat dummy value must be 1) --> R7 (B-catenin)
timeActivity R9_R7;
const double_t k_R9_R7 = {9090, -7};

//Reaction R83 (Smadcomplex) --> R63 (Msx2 prot)
timeActivity R83_R63;
const double_t k_R83_R63 = {9090, -8};

//Reaction R55 (Lef/Tcf prot) AND R53 (Lef/Tcf PTM) --> R52 (Lef/Tcf)
timeActivity R55_R53_R52;
const double_t k_R55_R53_R52 = {9090, -9};

//Reaction R84 (Sox9) --> R65 (Nkx3.2)
timeActivity R84_R65;
const double_t k_R84_R65 = {6090, -8};

//Reaction R64 (NFkb) --> R8 (BMP)
timeActivity R64_R8;
const double_t k_R64_R8 = {6090, -8};

//Reaction R77 (Runx2) --> R68 (PI3K prot)
timeActivity R77_R68;
const double_t k_R77_R68 = {9090, -8};

//Reaction R36 (FGFR3 PTM) --> R35 (FGFR3)
timeActivity R36_R35;
const double_t k_R36_R35 = {0, -6};

//Reaction R20 (DC dummy must be 1) --> R18 (DC canonical dummy)
timeActivity R20_R18;
const double_t k_R20_R18 = {9090, -7};

//Reaction R36 (FGFR3 PTM) --| R36 (FGFR3 PTM)
timeActivity R36_R36;
const double_t k_R36_R36 = {9090, -7};

//Reaction R11 (C/EBPb dummy) AND R92 (p38) --> R59 (MMP13)
timeActivity R11_R92_R59;
const double_t k_R11_R92_R59 = {1455, -10};

//Reaction R27 (ERK1/2) --> R3 (ATF4)
timeActivity R27_R3;
const double_t k_R27_R3 = {5270, -7};

//Reaction R5 (Akt PTM) --| R5 (Akt PTM)
timeActivity R5_R5;
const double_t k_R5_R5 = {9090, -7};

//Reaction R5 (Akt PTM) --> R4 (Akt)
timeActivity R5_R4;
const double_t k_R5_R4 = {0, -6};

//Reaction R86 (Sox9 prot) AND R85 (Sox9 PTM) --> R84 (Sox9)
timeActivity R86_R85_R84;
const double_t k_R86_R85_R84 = {9090, -9};

//Reaction R77 (Runx2) --> R6 (Akt prot)
timeActivity R77_R6;
const double_t k_R77_R6 = {9090, -8};

//Reaction R46 (HIF-2a) AND R77 (Runx2) --> R11 (C/EBPb dummy)
timeActivity R46_R77_R11;
const double_t k_R46_R77_R11 = {9090, -9};

//Reaction R27 (ERK1/2) --| R19 (DC degradation dummy)
timeActivity R27_R19;
const double_t k_R27_R19 = {7910, -7};

//Reaction R32 (FGFR1) --> R64 (NFkb)
timeActivity R32_R64;
const double_t k_R32_R64 = {6060, -7};

//Reaction R44 (Gli2) AND R84 (Sox9) --> R74 (PTHrP)
timeActivity R44_R84_R74;
const double_t k_R44_R84_R74 = {3000, -10};

//Reaction R44 (Gli2) --| R44 (Gli2)
timeActivity R44_R44;
const double_t k_R44_R44 = {9090, -7};

//Reaction R83 (Smadcomplex) AND R65 (Nkx3.2) --| R79 (Runx2 prot)
timeActivity R83_R65_R79;
const double_t k_R83_R65_R79 = {4000, -10};

//Reaction R47 (IGF-1) --> R49 (IGF-1R PTM)
timeActivity R47_R49;
const double_t k_R47_R49 = {9090, -7};

//Reaction R56 (MEF2C) --> R79 (Runx2 prot)
timeActivity R56_R79;
const double_t k_R56_R79 = {4000, -8};

//Reaction R47 (IGF-1) --| R47 (IGF-1)
timeActivity R47_R47;
const double_t k_R47_R47 = {9090, -8};

//Reaction R83 (Smadcomplex) --> R73 (PPR prot)
timeActivity R83_R73;
const double_t k_R83_R73 = {6090, -8};

//Reaction R69 (PKA) --> R3 (ATF4)
timeActivity R69_R3;
const double_t k_R69_R3 = {6060, -7};

//Reaction R69 (PKA) --> R42 (GSK dummy)
timeActivity R69_R42;
const double_t k_R69_R42 = {9090, -7};

//Reaction R8 (BMP) --| R8 (BMP)
timeActivity R8_R8;
const double_t k_R8_R8 = {9090, -8};

//Reaction R23 (Dlx5) --> R78 (Runx2 PTM)
timeActivity R23_R78;
const double_t k_R23_R78 = {9090, -7};

//Reaction R80 (STAT1) --> R82 (Smad7)
timeActivity R80_R82;
const double_t k_R80_R82 = {2455, -8};

//Reaction R51 (Ihh) --| R51 (Ihh)
timeActivity R51_R51;
const double_t k_R51_R51 = {9090, -8};

//Reaction R44 (Gli2) --| R59 (MMP13)
timeActivity R44_R59;
const double_t k_R44_R59 = {2273, -8};

//Reaction R66 (PI3K) --| R66 (PI3K)
timeActivity R66_R66;
const double_t k_R66_R66 = {9090, -7};

//Reaction R83 (Smadcomplex) --> R51 (Ihh)
timeActivity R83_R51;
const double_t k_R83_R51 = {6090, -8};

//Reaction R80 (STAT1) --| R80 (STAT1)
timeActivity R80_R80;
const double_t k_R80_R80 = {9090, -7};

//Reaction R79 (Runx2 prot) --| R79 (Runx2 prot)
timeActivity R79_R79;
const double_t k_R79_R79 = {9090, -8};

//Reaction R2 (ATF2 prot) --| R2 (ATF2 prot)
timeActivity R2_R2;
const double_t k_R2_R2 = {9090, -8};

//Reaction R73 (PPR prot) AND R72 (PPR PTM) --> R71 (PPR)
timeActivity R73_R72_R71;
const double_t k_R73_R72_R71 = {9090, -9};

//Reaction R23 (Dlx5) --> R79 (Runx2 prot)
timeActivity R23_R79;
const double_t k_R23_R79 = {4000, -8};

//Reaction R69 (PKA) --> R47 (IGF-1)
timeActivity R69_R47;
const double_t k_R69_R47 = {9090, -8};

//Reaction R51 (Ihh) --> R44 (Gli2)
timeActivity R51_R44;
const double_t k_R51_R44 = {6060, -7};

//Reaction R34 (FGFR1 prot) --| R34 (FGFR1 prot)
timeActivity R34_R34;
const double_t k_R34_R34 = {9090, -8};

//Reaction R58 (MEF2C prot) AND R57 (MEF2C PTM) --> R56 (MEF2C)
timeActivity R58_R57_R56;
const double_t k_R58_R57_R56 = {9090, -9};

//Reaction R79 (Runx2 prot) AND R78 (Runx2 PTM) --> R77 (Runx2)
timeActivity R79_R78_R77;
const double_t k_R79_R78_R77 = {9090, -9};

//Reaction R17 (Col-X) --| R17 (Col-X)
timeActivity R17_R17;
const double_t k_R17_R17 = {9090, -8};

//Reaction R64 (NFkb) --> R46 (HIF-2a)
timeActivity R64_R46;
const double_t k_R64_R46 = {9090, -8};

//Reaction R81 (Smad3) --| R25 (Dlx5 prot)
timeActivity R81_R25;
const double_t k_R81_R25 = {1291, -7};

//Reaction R90 (dEF-1) --| R90 (dEF-1)
timeActivity R90_R90;
const double_t k_R90_R90 = {9090, -8};

//Reaction R92 (p38) --> R86 (Sox9 prot)
timeActivity R92_R86;
const double_t k_R92_R86 = {1909, -8};

//Reaction R92 (p38) AND R81 (Smad3) --> R1 (ATF2 PTM)
timeActivity R92_R81_R1;
const double_t k_R92_R81_R1 = {8220, -9};

//Reaction R63 (Msx2 prot) AND R61 (Msx2 PTM) --> R60 (Msx2)
timeActivity R63_R61_R60;
const double_t k_R63_R61_R60 = {9090, -9};

//Reaction R60 (Msx2) --| R88 (Wnt)
timeActivity R60_R88;
const double_t k_R60_R88 = {6090, -8};

//Reaction R33 (FGFR1 PTM) --| R33 (FGFR1 PTM)
timeActivity R33_R33;
const double_t k_R33_R33 = {9090, -7};

//Reaction R33 (FGFR1 PTM) --> R32 (FGFR1)
timeActivity R33_R32;
const double_t k_R33_R32 = {0, -6};

//Reaction R4 (Akt) --> R78 (Runx2 PTM)
timeActivity R4_R78;
const double_t k_R4_R78 = {9090, -7};

//Reaction R60 (Msx2) --| R78 (Runx2 PTM)
timeActivity R60_R78;
const double_t k_R60_R78 = {9090, -7};

//Reaction R60 (Msx2) --| R79 (Runx2 prot)
timeActivity R60_R79;
const double_t k_R60_R79 = {4000, -8};

//Reaction R10 (Bcatleftcfcomplex) --| R10 (Bcatleftcfcomplex)
timeActivity R10_R10;
const double_t k_R10_R10 = {9090, -7};

//Reaction R70 (PP2A) --| R70 (PP2A)
timeActivity R70_R70;
const double_t k_R70_R70 = {9090, -7};

//Reaction R65 (Nkx3.2) --| R65 (Nkx3.2)
timeActivity R65_R65;
const double_t k_R65_R65 = {9090, -8};

//Reaction R7 (B-catenin) --| R85 (Sox9 PTM)
timeActivity R7_R85;
const double_t k_R7_R85 = {9090, -7};

//Reaction R83 (Smadcomplex) --| R33 (FGFR1 PTM)
timeActivity R83_R33;
const double_t k_R83_R33 = {4550, -7};

//Reaction R64 (NFkb) --> R50 (IGF-1R prot)
timeActivity R64_R50;
const double_t k_R64_R50 = {9090, -8};

//Reaction R64 (NFkb) --> R51 (Ihh)
timeActivity R64_R51;
const double_t k_R64_R51 = {6090, -8};

//Reaction R81 (Smad3) --> R30 (Ets1 prot)
timeActivity R81_R30;
const double_t k_R81_R30 = {1291, -7};

//Reaction R26 (Dsh) --| R26 (Dsh)
timeActivity R26_R26;
const double_t k_R26_R26 = {9090, -7};

//Reaction R64 (NFkb) --> R59 (MMP13)
timeActivity R64_R59;
const double_t k_R64_R59 = {2273, -8};

//Reaction R44 (Gli2) --> R73 (PPR prot)
timeActivity R44_R73;
const double_t k_R44_R73 = {6090, -8};

//Reaction R69 (PKA) --| R69 (PKA)
timeActivity R69_R69;
const double_t k_R69_R69 = {9090, -7};

//Reaction R12 (CCND1) --| R12 (CCND1)
timeActivity R12_R12;
const double_t k_R12_R12 = {9090, -7};

//Reaction R52 (Lef/Tcf) --> R10 (Bcatleftcfcomplex)
timeActivity R52_R10;
const double_t k_R52_R10 = {0, -6};

//Reaction R88 (Wnt) --> R76 (Ras)
timeActivity R88_R76;
const double_t k_R88_R76 = {4040, -7};

//Reaction R43 (GSK dummy must be one) --> R41 (GSK)
timeActivity R43_R41;
const double_t k_R43_R41 = {9090, -7};

//Reaction R45 (HDAC4) --| R45 (HDAC4)
timeActivity R45_R45;
const double_t k_R45_R45 = {9090, -7};

//Reaction R83 (Smadcomplex) --> R24 (Dlx5 PTM)
timeActivity R83_R24;
const double_t k_R83_R24 = {9090, -7};

//Reaction R83 (Smadcomplex) --> R25 (Dlx5 prot)
timeActivity R83_R25;
const double_t k_R83_R25 = {9090, -8};

//Reaction R42 (GSK dummy) AND R27 (ERK1/2) --| R41 (GSK)
timeActivity R42_R27_R41;
const double_t k_R42_R27_R41 = {7910, -9};

//Reaction R64 (NFkb) --| R64 (NFkb)
timeActivity R64_R64;
const double_t k_R64_R64 = {9090, -7};

//Reaction R49 (IGF-1R PTM) --| R49 (IGF-1R PTM)
timeActivity R49_R49;
const double_t k_R49_R49 = {9090, -7};

//Reaction R7 (B-catenin) --| R7 (B-catenin)
timeActivity R7_R7;
const double_t k_R7_R7 = {9090, -7};

//Reaction R49 (IGF-1R PTM) --> R48 (IGF-1R)
timeActivity R49_R48;
const double_t k_R49_R48 = {0, -6};

//Reaction R75 (R-smad) --| R75 (R-smad)
timeActivity R75_R75;
const double_t k_R75_R75 = {9090, -7};

//Reaction R80 (STAT1) --| R73 (PPR prot)
timeActivity R80_R73;
const double_t k_R80_R73 = {6090, -8};

//Reaction R44 (Gli2) --> R87 (TGFb)
timeActivity R44_R87;
const double_t k_R44_R87 = {9090, -8};

//Reaction R44 (Gli2) --> R88 (Wnt)
timeActivity R44_R88;
const double_t k_R44_R88 = {1209, -7};

//Reaction R92 (p38) --> R57 (MEF2C PTM)
timeActivity R92_R57;
const double_t k_R92_R57 = {5790, -7};

//Reaction R31 (FGF) --> R36 (FGFR3 PTM)
timeActivity R31_R36;
const double_t k_R31_R36 = {9090, -7};

//Reaction R92 (p38) --> R59 (MMP13)
timeActivity R92_R59;
const double_t k_R92_R59 = {0, -6};

//Reaction R63 (Msx2 prot) --| R63 (Msx2 prot)
timeActivity R63_R63;
const double_t k_R63_R63 = {9090, -8};

//Reaction R75 (R-smad) --> R83 (Smadcomplex)
timeActivity R75_R83;
const double_t k_R75_R83 = {9090, -7};

//Reaction R31 (FGF) --| R31 (FGF)
timeActivity R31_R31;
const double_t k_R31_R31 = {9090, -8};

//Reaction R31 (FGF) --> R33 (FGFR1 PTM)
timeActivity R31_R33;
const double_t k_R31_R33 = {9090, -7};

//Reaction R11 (C/EBPb dummy) --| R11 (C/EBPb dummy)
timeActivity R11_R11;
const double_t k_R11_R11 = {9090, -7};

//Reaction R3 (ATF4) --| R3 (ATF4)
timeActivity R3_R3;
const double_t k_R3_R3 = {9090, -7};

//Reaction R88 (Wnt) --| R88 (Wnt)
timeActivity R88_R88;
const double_t k_R88_R88 = {9090, -8};

//Reaction R18 (DC canonical dummy) AND R19 (DC degradation dummy) --> R91 (destruction complex)
timeActivity R18_R19_R91;
const double_t k_R18_R19_R91 = {9090, -9};

//Reaction R28 (Ets1) --| R28 (Ets1)
timeActivity R28_R28;
const double_t k_R28_R28 = {9090, -7};

//Reaction R67 (PI3K PTM) --> R66 (PI3K)
timeActivity R67_R66;
const double_t k_R67_R66 = {0, -6};

//Reaction R67 (PI3K PTM) --| R67 (PI3K PTM)
timeActivity R67_R67;
const double_t k_R67_R67 = {9090, -7};

//Reaction R26 (Dsh) --| R18 (DC canonical dummy)
timeActivity R26_R18;
const double_t k_R26_R18 = {9090, -7};

//Reaction R73 (PPR prot) --| R73 (PPR prot)
timeActivity R73_R73;
const double_t k_R73_R73 = {9090, -8};

//Reaction R52 (Lef/Tcf) --> R79 (Runx2 prot)
timeActivity R52_R79;
const double_t k_R52_R79 = {4000, -8};

//Reaction R0 (ATF2) --> R15 (CCND1 prot)
timeActivity R0_R15;
const double_t k_R0_R15 = {6090, -8};

//Reaction R87 (TGFb) --> R92 (p38)
timeActivity R87_R92;
const double_t k_R87_R92 = {6060, -7};

//Reaction R44 (Gli2) --> R8 (BMP)
timeActivity R44_R8;
const double_t k_R44_R8 = {6090, -8};

//Reaction R50 (IGF-1R prot) AND R49 (IGF-1R PTM) --> R48 (IGF-1R)
timeActivity R50_R49_R48;
const double_t k_R50_R49_R48 = {9090, -9};

//Reaction R42 (GSK dummy) --| R42 (GSK dummy)
timeActivity R42_R42;
const double_t k_R42_R42 = {9090, -7};

//Reaction R16 (Col-II) --| R16 (Col-II)
timeActivity R16_R16;
const double_t k_R16_R16 = {9090, -8};

//Reaction R7 (B-catenin) --> R31 (FGF)
timeActivity R7_R31;
const double_t k_R7_R31 = {6090, -8};

//Reaction R77 (Runx2) --> R11 (C/EBPb dummy)
timeActivity R77_R11;
const double_t k_R77_R11 = {0, -6};

//Reaction R46 (HIF-2a) --> R59 (MMP13)
timeActivity R46_R59;
const double_t k_R46_R59 = {2273, -8};

//Reaction R68 (PI3K prot) --| R68 (PI3K prot)
timeActivity R68_R68;
const double_t k_R68_R68 = {9090, -8};

//Reaction R64 (NFkb) --> R82 (Smad7)
timeActivity R64_R82;
const double_t k_R64_R82 = {4820, -8};

//Reaction R65 (Nkx3.2) --> R16 (Col-II)
timeActivity R65_R16;
const double_t k_R65_R16 = {4000, -8};

//Reaction R87 (TGFb) --| R87 (TGFb)
timeActivity R87_R87;
const double_t k_R87_R87 = {9090, -8};

//Reaction R59 (MMP13) --| R59 (MMP13)
timeActivity R59_R59;
const double_t k_R59_R59 = {9090, -8};

//Reaction R82 (Smad7) --| R81 (Smad3)
timeActivity R82_R81;
const double_t k_R82_R81 = {4550, -7};

//Reaction R82 (Smad7) --| R82 (Smad7)
timeActivity R82_R82;
const double_t k_R82_R82 = {9090, -8};

//Reaction R77 (Runx2) --> R17 (Col-X)
timeActivity R77_R17;
const double_t k_R77_R17 = {6090, -8};

//Reaction R68 (PI3K prot) AND R67 (PI3K PTM) --> R66 (PI3K)
timeActivity R68_R67_R66;
const double_t k_R68_R67_R66 = {9090, -9};

//Reaction R6 (Akt prot) AND R5 (Akt PTM) --> R4 (Akt)
timeActivity R6_R5_R4;
const double_t k_R6_R5_R4 = {9090, -9};

//Reaction R80 (STAT1) --| R50 (IGF-1R prot)
timeActivity R80_R50;
const double_t k_R80_R50 = {9090, -8};

//Reaction R8 (BMP) --> R76 (Ras)
timeActivity R8_R76;
const double_t k_R8_R76 = {4040, -7};

//Reaction R90 (dEF-1) --| R51 (Ihh)
timeActivity R90_R51;
const double_t k_R90_R51 = {6090, -8};

//Reaction R87 (TGFb) --> R81 (Smad3)
timeActivity R87_R81;
const double_t k_R87_R81 = {9090, -7};

//Reaction R8 (BMP) --> R75 (R-smad)
timeActivity R8_R75;
const double_t k_R8_R75 = {9090, -7};

//Reaction R89 (Wnt Addition) --> R88 (Wnt)
timeActivity R89_R88;
const double_t k_R89_R88 = {9090, -4};

//Reaction R64 (NFkb) --> R90 (dEF-1)
timeActivity R64_R90;
const double_t k_R64_R90 = {6090, -8};

//Reaction R48 (IGF-1R) --> R80 (STAT1)
timeActivity R48_R80;
const double_t k_R48_R80 = {3027, -7};

//Reaction R45 (HDAC4) --| R57 (MEF2C PTM)
timeActivity R45_R57;
const double_t k_R45_R57 = {9090, -7};

//Reaction R25 (Dlx5 prot) --| R25 (Dlx5 prot)
timeActivity R25_R25;
const double_t k_R25_R25 = {9090, -8};

//Reaction R0 (ATF2) --| R0 (ATF2)
timeActivity R0_R0;
const double_t k_R0_R0 = {9090, -7};

//Reaction R81 (Smad3) AND R45 (HDAC4) --| R78 (Runx2 PTM)
timeActivity R81_R45_R78;
const double_t k_R81_R45_R78 = {1291, -8};

//Reaction R30 (Ets1 prot) --| R30 (Ets1 prot)
timeActivity R30_R30;
const double_t k_R30_R30 = {9090, -8};

//Reaction R75 (R-smad) --| R26 (Dsh)
timeActivity R75_R26;
const double_t k_R75_R26 = {4550, -7};

//Reaction R35 (FGFR3) --> R80 (STAT1)
timeActivity R35_R80;
const double_t k_R35_R80 = {4040, -7};

//Reaction R19 (DC degradation dummy) --> R91 (destruction complex)
timeActivity R19_R91;
const double_t k_R19_R91 = {0, -6};

//Reaction R92 (p38) --| R92 (p38)
timeActivity R92_R92;
const double_t k_R92_R92 = {9090, -7};

//Reaction R3 (ATF4) --> R51 (Ihh)
timeActivity R3_R51;
const double_t k_R3_R51 = {6090, -8};

//Reaction R7 (B-catenin) --> R53 (Lef/Tcf PTM)
timeActivity R7_R53;
const double_t k_R7_R53 = {9090, -7};

//Reaction R46 (HIF-2a) --> R79 (Runx2 prot)
timeActivity R46_R79;
const double_t k_R46_R79 = {4000, -8};

//Reaction R7 (B-catenin) --> R55 (Lef/Tcf prot)
timeActivity R7_R55;
const double_t k_R7_R55 = {4000, -8};

//Reaction R76 (Ras) --| R76 (Ras)
timeActivity R76_R76;
const double_t k_R76_R76 = {9090, -7};

//Reaction R88 (Wnt) --> R39 (Frizzled - LRP 5/6)
timeActivity R88_R39;
const double_t k_R88_R39 = {9090, -7};

//Reaction R35 (FGFR3) --> R76 (Ras)
timeActivity R35_R76;
const double_t k_R35_R76 = {4040, -7};

//Reaction R34 (FGFR1 prot) AND R33 (FGFR1 PTM) --> R32 (FGFR1)
timeActivity R34_R33_R32;
const double_t k_R34_R33_R32 = {9090, -9};

//Reaction R60 (Msx2) --| R60 (Msx2)
timeActivity R60_R60;
const double_t k_R60_R60 = {9090, -7};

//Reaction R69 (PKA) --> R15 (CCND1 prot)
timeActivity R69_R15;
const double_t k_R69_R15 = {6090, -8};

//Reaction R69 (PKA) --| R17 (Col-X)
timeActivity R69_R17;
const double_t k_R69_R17 = {6090, -8};

//Reaction R23 (Dlx5) --| R63 (Msx2 prot)
timeActivity R23_R63;
const double_t k_R23_R63 = {9090, -8};

//Reaction R85 (Sox9 PTM) --> R84 (Sox9)
timeActivity R85_R84;
const double_t k_R85_R84 = {0, -6};

//Reaction R85 (Sox9 PTM) --| R85 (Sox9 PTM)
timeActivity R85_R85;
const double_t k_R85_R85 = {9090, -7};

//Reaction R25 (Dlx5 prot) AND R24 (Dlx5 PTM) --> R23 (Dlx5)
timeActivity R25_R24_R23;
const double_t k_R25_R24_R23 = {9090, -9};

//Reaction R23 (Dlx5) --| R61 (Msx2 PTM)
timeActivity R23_R61;
const double_t k_R23_R61 = {9090, -7};

//Reaction R8 (BMP) --> R92 (p38)
timeActivity R8_R92;
const double_t k_R8_R92 = {6060, -7};

//Reaction R53 (Lef/Tcf PTM) --| R53 (Lef/Tcf PTM)
timeActivity R53_R53;
const double_t k_R53_R53 = {9090, -7};

//Reaction R53 (Lef/Tcf PTM) --> R52 (Lef/Tcf)
timeActivity R53_R52;
const double_t k_R53_R52 = {0, -6};

//Reaction R66 (PI3K) --> R5 (Akt PTM)
timeActivity R66_R5;
const double_t k_R66_R5 = {9090, -7};

//Reaction R37 (FGFR3 prot) --| R37 (FGFR3 prot)
timeActivity R37_R37;
const double_t k_R37_R37 = {9090, -8};

//Reaction R48 (IGF-1R) --> R67 (PI3K PTM)
timeActivity R48_R67;
const double_t k_R48_R67 = {6060, -7};

//Reaction R45 (HDAC4) --| R78 (Runx2 PTM)
timeActivity R45_R78;
const double_t k_R45_R78 = {0, -6};

//Reaction R76 (Ras) --> R67 (PI3K PTM)
timeActivity R76_R67;
const double_t k_R76_R67 = {6060, -7};

//Reaction R52 (Lef/Tcf) --| R52 (Lef/Tcf)
timeActivity R52_R52;
const double_t k_R52_R52 = {9090, -7};

//Reaction R82 (Smad7) --| R75 (R-smad)
timeActivity R82_R75;
const double_t k_R82_R75 = {9090, -7};



double_t subtract(double_t a, double_t b) { // a - b
	double_t r = {-1000, -1000};
	if (a.b == 0) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (a.e == b.e) {
		r.b = a.b - b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b - b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b - b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b - b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 - b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t add(double_t a, double_t b) { // a + b
	double_t r = {-1000,-1000};
	if (a.b == 0) {
		return b;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) return b;
	if (a.e == b.e) {
		r.b = a.b + b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b + b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b + b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b + b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 + b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t multiply(double_t a, double_t b) { // a * b
	double_t r;
	r.b = a.b * b.b;
	if (r.b % 1000 &lt; 500) {
		r.b = r.b / 1000;
	} else {
		r.b = 1 + r.b / 1000;
	}
	r.e = a.e + b.e + 3;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t inverse(double_t a) { // 1 / a
	double_t r;
	if (a.b == 0 || a.e &lt; -9) { // 1 / 1e-9 is still ok, but 1 / 1e-10 is too large (&gt; 2&#94;30 - 2, the largest allowed constant for guards/invariants)
		return INFINITE_TIME_DOUBLE;
	}
	r.b = 1000000 / a.b;
	r.e = -6 - a.e;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	}
	return r;
}

time_t power(int a, int b) { // a ^ b (b &gt;= 0)
	time_t r = 1;
	while (b &gt; 0) {
		r = r * a;
		b = b - 1;
	}
	return r;
}

time_t round(double_t a) { // double --&gt; integer
	if (a == INFINITE_TIME_DOUBLE) { // Don't need to translate literally if we have infinite
		return INFINITE_TIME;
	}
	if (a.e &lt; -3) {
		if (a.b &lt; 5000) return 0;
		else return 1;
	}
	if (a.e == -1) {
		if (a.b % 10 &lt; 5) {
			return a.b / 10;
		} else {
			return 1 + a.b / 10;
		}
	}
	if (a.e == -2) {
		if (a.b % 100 &lt; 50) {
			return a.b / 100;
		} else {
			return 1 + a.b / 100;
		}
	}
	if (a.e == -3) {
		if (a.b % 1000 &lt; 500) {
			return a.b / 1000;
		} else {
			return 1 + a.b / 1000;
		}
	}
	return a.b * power(10, a.e);
}

double_t scenario1(double_t k, double_t r1, double_t r1Levels, bool r1Active) {
	double_t E;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	return multiply(k, E);
}


double_t scenario2_3(double_t k, double_t r2, double_t r2Levels, bool r2Active, double_t r1, double_t r1Levels, bool r1Active) {
	double_t E, S;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	if (r2Active) { //Same for R2
		S = r2;
	} else {
		S = subtract(r2Levels, r2);
	}
	return multiply(k, multiply(E, S));
}


double_t int_to_double(int a) { //Used to translate an activity level into double.
	double_t r;
	if (a &lt; 10) {
		r.b = a * 1000;
		r.e = -3;
	} else if (a &lt; 100) {
		r.b = a * 100;
		r.e = -2;
	} else if (a &lt; 1000) {
		r.b = a * 10;
		r.e = -1;
	} else if (a &lt; 10000) { //Our model supports up to 100 levels, so this should be the most it makes sense to check
		r.b = a;
		r.e = 0;
	}
	return r;
}
</declaration>

<template>
  <name>Reactant_R0</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R2_R1_R0_r = scenario2_3(k_R2_R1_R0, int_to_double(R1), int_to_double(R1Levels), true, int_to_double(R2), int_to_double(R2Levels), true);
	double_t R1_R0_r = scenario1(k_R1_R0, int_to_double(R1), int_to_double(R1Levels), true);
	double_t R0_R0_r = scenario1(k_R0_R0, int_to_double(R0), int_to_double(R0Levels), true);
	totalRate = subtract(add(add(zero, R2_R1_R0_r), R1_R0_r), R0_R0_r);
	R2_R1_R0.T = round(inverse(R2_R1_R0_r));
	R1_R0.T = round(inverse(R1_R0_r));
	R0_R0.T = round(inverse(R0_R0_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[2]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[1]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[0]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[2]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[1]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R1</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R1_R1_r = scenario1(k_R1_R1, int_to_double(R1), int_to_double(R1Levels), true);
	double_t R81_R1_r = scenario1(k_R81_R1, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R92_R81_R1_r = scenario2_3(k_R92_R81_R1, int_to_double(R81), int_to_double(R81Levels), true, int_to_double(R92), int_to_double(R92Levels), true);
	totalRate = add(add(subtract(zero, R1_R1_r), R81_R1_r), R92_R81_R1_r);
	R1_R1.T = round(inverse(R1_R1_r));
	R81_R1.T = round(inverse(R81_R1_r));
	R92_R81_R1.T = round(inverse(R92_R81_R1_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[89]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[1]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[78]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[89]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R2</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R81_R2_r = scenario1(k_R81_R2, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R2_R2_r = scenario1(k_R2_R2, int_to_double(R2), int_to_double(R2Levels), true);
	totalRate = subtract(add(zero, R81_R2_r), R2_R2_r);
	R81_R2.T = round(inverse(R81_R2_r));
	R2_R2.T = round(inverse(R2_R2_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[2]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[78]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R3</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R27_R3_r = scenario1(k_R27_R3, int_to_double(R27), int_to_double(R27Levels), true);
	double_t R69_R3_r = scenario1(k_R69_R3, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R3_R3_r = scenario1(k_R3_R3, int_to_double(R3), int_to_double(R3Levels), true);
	totalRate = subtract(add(add(zero, R27_R3_r), R69_R3_r), R3_R3_r);
	R27_R3.T = round(inverse(R27_R3_r));
	R69_R3.T = round(inverse(R69_R3_r));
	R3_R3.T = round(inverse(R3_R3_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[3]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[26]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[66]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R4</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R4_R4_r = scenario1(k_R4_R4, int_to_double(R4), int_to_double(R4Levels), true);
	double_t R5_R4_r = scenario1(k_R5_R4, int_to_double(R5), int_to_double(R5Levels), true);
	double_t R6_R5_R4_r = scenario2_3(k_R6_R5_R4, int_to_double(R5), int_to_double(R5Levels), true, int_to_double(R6), int_to_double(R6Levels), true);
	totalRate = add(add(subtract(zero, R4_R4_r), R5_R4_r), R6_R5_R4_r);
	R4_R4.T = round(inverse(R4_R4_r));
	R5_R4.T = round(inverse(R5_R4_r));
	R6_R5_R4.T = round(inverse(R6_R5_R4_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[5]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[6]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[4]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[5]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[6]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R5</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R70_R5_r = scenario1(k_R70_R5, int_to_double(R70), int_to_double(R70Levels), true);
	double_t R5_R5_r = scenario1(k_R5_R5, int_to_double(R5), int_to_double(R5Levels), true);
	double_t R66_R5_r = scenario1(k_R66_R5, int_to_double(R66), int_to_double(R66Levels), true);
	totalRate = add(subtract(subtract(zero, R70_R5_r), R5_R5_r), R66_R5_r);
	R70_R5.T = round(inverse(R70_R5_r));
	R5_R5.T = round(inverse(R5_R5_r));
	R66_R5.T = round(inverse(R66_R5_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[67]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[63]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[5]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[67]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[63]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R6</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R6_R6_r = scenario1(k_R6_R6, int_to_double(R6), int_to_double(R6Levels), true);
	double_t R77_R6_r = scenario1(k_R77_R6, int_to_double(R77), int_to_double(R77Levels), true);
	totalRate = add(subtract(zero, R6_R6_r), R77_R6_r);
	R6_R6.T = round(inverse(R6_R6_r));
	R77_R6.T = round(inverse(R77_R6_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[6]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R7</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R91_R7_r = scenario1(k_R91_R7, int_to_double(R91), int_to_double(R91Levels), true);
	double_t R9_R7_r = scenario1(k_R9_R7, int_to_double(R9), int_to_double(R9Levels), true);
	double_t R7_R7_r = scenario1(k_R7_R7, int_to_double(R7), int_to_double(R7Levels), true);
	totalRate = subtract(add(subtract(zero, R91_R7_r), R9_R7_r), R7_R7_r);
	R91_R7.T = round(inverse(R91_R7_r));
	R9_R7.T = round(inverse(R9_R7_r));
	R7_R7.T = round(inverse(R7_R7_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[88]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[9]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[7]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[88]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[9]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R8</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R64_R8_r = scenario1(k_R64_R8, int_to_double(R64), int_to_double(R64Levels), true);
	double_t R8_R8_r = scenario1(k_R8_R8, int_to_double(R8), int_to_double(R8Levels), true);
	double_t R44_R8_r = scenario1(k_R44_R8, int_to_double(R44), int_to_double(R44Levels), true);
	totalRate = add(subtract(add(zero, R64_R8_r), R8_R8_r), R44_R8_r);
	R64_R8.T = round(inverse(R64_R8_r));
	R8_R8.T = round(inverse(R8_R8_r));
	R44_R8.T = round(inverse(R44_R8_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[8]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[61]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[41]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R10</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R7_R52_R10_r = scenario2_3(k_R7_R52_R10, int_to_double(R52), int_to_double(R52Levels), true, int_to_double(R7), int_to_double(R7Levels), true);
	double_t R10_R10_r = scenario1(k_R10_R10, int_to_double(R10), int_to_double(R10Levels), true);
	double_t R52_R10_r = scenario1(k_R52_R10, int_to_double(R52), int_to_double(R52Levels), true);
	totalRate = add(subtract(add(zero, R7_R52_R10_r), R10_R10_r), R52_R10_r);
	R7_R52_R10.T = round(inverse(R7_R52_R10_r));
	R10_R10.T = round(inverse(R10_R10_r));
	R52_R10.T = round(inverse(R52_R10_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[7]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[49]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[10]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[7]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[49]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R11</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R46_R77_R11_r = scenario2_3(k_R46_R77_R11, int_to_double(R77), int_to_double(R77Levels), true, int_to_double(R46), int_to_double(R46Levels), true);
	double_t R11_R11_r = scenario1(k_R11_R11, int_to_double(R11), int_to_double(R11Levels), true);
	double_t R77_R11_r = scenario1(k_R77_R11, int_to_double(R77), int_to_double(R77Levels), true);
	totalRate = add(subtract(add(zero, R46_R77_R11_r), R11_R11_r), R77_R11_r);
	R46_R77_R11.T = round(inverse(R46_R77_R11_r));
	R11_R11.T = round(inverse(R11_R11_r));
	R77_R11.T = round(inverse(R77_R11_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[43]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[11]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[43]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[74]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R12</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R13_R12_r = scenario1(k_R13_R12, int_to_double(R13), int_to_double(R13Levels), true);
	double_t R15_R13_R12_r = scenario2_3(k_R15_R13_R12, int_to_double(R13), int_to_double(R13Levels), true, int_to_double(R15), int_to_double(R15Levels), true);
	double_t R12_R12_r = scenario1(k_R12_R12, int_to_double(R12), int_to_double(R12Levels), true);
	totalRate = subtract(add(add(zero, R13_R12_r), R15_R13_R12_r), R12_R12_r);
	R13_R12.T = round(inverse(R13_R12_r));
	R15_R13_R12.T = round(inverse(R15_R13_R12_r));
	R12_R12.T = round(inverse(R12_R12_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[13]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[15]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[12]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[13]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[15]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R13</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R14_R13_r = scenario1(k_R14_R13, int_to_double(R14), int_to_double(R14Levels), true);
	double_t R80_R13_r = scenario1(k_R80_R13, int_to_double(R80), int_to_double(R80Levels), true);
	double_t R13_R13_r = scenario1(k_R13_R13, int_to_double(R13), int_to_double(R13Levels), true);
	double_t R41_R13_r = scenario1(k_R41_R13, int_to_double(R41), int_to_double(R41Levels), true);
	totalRate = subtract(subtract(subtract(add(zero, R14_R13_r), R80_R13_r), R13_R13_r), R41_R13_r);
	R14_R13.T = round(inverse(R14_R13_r));
	R80_R13.T = round(inverse(R80_R13_r));
	R13_R13.T = round(inverse(R13_R13_r));
	R41_R13.T = round(inverse(R41_R13_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[14]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[77]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[38]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[13]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[14]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[77]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[38]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R15</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R15_R15_r = scenario1(k_R15_R15, int_to_double(R15), int_to_double(R15Levels), true);
	double_t R44_R15_r = scenario1(k_R44_R15, int_to_double(R44), int_to_double(R44Levels), true);
	double_t R0_R15_r = scenario1(k_R0_R15, int_to_double(R0), int_to_double(R0Levels), true);
	double_t R69_R15_r = scenario1(k_R69_R15, int_to_double(R69), int_to_double(R69Levels), true);
	totalRate = add(add(add(subtract(zero, R15_R15_r), R44_R15_r), R0_R15_r), R69_R15_r);
	R15_R15.T = round(inverse(R15_R15_r));
	R44_R15.T = round(inverse(R44_R15_r));
	R0_R15.T = round(inverse(R0_R15_r));
	R69_R15.T = round(inverse(R69_R15_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[0]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[15]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[41]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[0]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[66]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R16</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R84_R16_r = scenario1(k_R84_R16, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R64_R16_r = scenario1(k_R64_R16, int_to_double(R64), int_to_double(R64Levels), true);
	double_t R16_R16_r = scenario1(k_R16_R16, int_to_double(R16), int_to_double(R16Levels), true);
	double_t R65_R16_r = scenario1(k_R65_R16, int_to_double(R65), int_to_double(R65Levels), true);
	totalRate = add(subtract(add(add(zero, R84_R16_r), R64_R16_r), R16_R16_r), R65_R16_r);
	R84_R16.T = round(inverse(R84_R16_r));
	R64_R16.T = round(inverse(R64_R16_r));
	R16_R16.T = round(inverse(R16_R16_r));
	R65_R16.T = round(inverse(R65_R16_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[62]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[16]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[81]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[61]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[62]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R17</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R56_R17_r = scenario1(k_R56_R17, int_to_double(R56), int_to_double(R56Levels), true);
	double_t R75_R17_r = scenario1(k_R75_R17, int_to_double(R75), int_to_double(R75Levels), true);
	double_t R17_R17_r = scenario1(k_R17_R17, int_to_double(R17), int_to_double(R17Levels), true);
	double_t R77_R17_r = scenario1(k_R77_R17, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R69_R17_r = scenario1(k_R69_R17, int_to_double(R69), int_to_double(R69Levels), true);
	totalRate = subtract(add(subtract(add(add(zero, R56_R17_r), R75_R17_r), R17_R17_r), R77_R17_r), R69_R17_r);
	R56_R17.T = round(inverse(R56_R17_r));
	R75_R17.T = round(inverse(R75_R17_r));
	R17_R17.T = round(inverse(R17_R17_r));
	R77_R17.T = round(inverse(R77_R17_r));
	R69_R17.T = round(inverse(R69_R17_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[53]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[72]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[17]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[53]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[72]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[74]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[66]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R18</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R18_R18_r = scenario1(k_R18_R18, int_to_double(R18), int_to_double(R18Levels), true);
	double_t R20_R18_r = scenario1(k_R20_R18, int_to_double(R20), int_to_double(R20Levels), true);
	double_t R26_R18_r = scenario1(k_R26_R18, int_to_double(R26), int_to_double(R26Levels), true);
	totalRate = subtract(add(subtract(zero, R18_R18_r), R20_R18_r), R26_R18_r);
	R18_R18.T = round(inverse(R18_R18_r));
	R20_R18.T = round(inverse(R20_R18_r));
	R26_R18.T = round(inverse(R26_R18_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[21]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[25]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[18]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[21]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[25]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R19</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R21_R19_r = scenario1(k_R21_R19, int_to_double(R21), int_to_double(R21Levels), true);
	double_t R19_R19_r = scenario1(k_R19_R19, int_to_double(R19), int_to_double(R19Levels), true);
	double_t R27_R19_r = scenario1(k_R27_R19, int_to_double(R27), int_to_double(R27Levels), true);
	totalRate = subtract(subtract(add(zero, R21_R19_r), R19_R19_r), R27_R19_r);
	R21_R19.T = round(inverse(R21_R19_r));
	R19_R19.T = round(inverse(R19_R19_r));
	R27_R19.T = round(inverse(R27_R19_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[20]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[19]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[20]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[26]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R23</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R24_R23_r = scenario1(k_R24_R23, int_to_double(R24), int_to_double(R24Levels), true);
	double_t R23_R23_r = scenario1(k_R23_R23, int_to_double(R23), int_to_double(R23Levels), true);
	double_t R25_R24_R23_r = scenario2_3(k_R25_R24_R23, int_to_double(R24), int_to_double(R24Levels), true, int_to_double(R25), int_to_double(R25Levels), true);
	totalRate = add(subtract(add(zero, R24_R23_r), R23_R23_r), R25_R24_R23_r);
	R24_R23.T = round(inverse(R24_R23_r));
	R23_R23.T = round(inverse(R23_R23_r));
	R25_R24_R23.T = round(inverse(R25_R24_R23_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[23]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[24]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[22]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[23]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[24]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R24</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R24_R24_r = scenario1(k_R24_R24, int_to_double(R24), int_to_double(R24Levels), true);
	double_t R60_R24_r = scenario1(k_R60_R24, int_to_double(R60), int_to_double(R60Levels), true);
	double_t R92_R24_r = scenario1(k_R92_R24, int_to_double(R92), int_to_double(R92Levels), true);
	double_t R83_R24_r = scenario1(k_R83_R24, int_to_double(R83), int_to_double(R83Levels), true);
	totalRate = add(add(subtract(subtract(zero, R24_R24_r), R60_R24_r), R92_R24_r), R83_R24_r);
	R24_R24.T = round(inverse(R24_R24_r));
	R60_R24.T = round(inverse(R60_R24_r));
	R92_R24.T = round(inverse(R92_R24_r));
	R83_R24.T = round(inverse(R83_R24_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[57]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[89]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[23]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[57]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[89]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[80]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R25</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R56_R25_r = scenario1(k_R56_R25, int_to_double(R56), int_to_double(R56Levels), true);
	double_t R60_R25_r = scenario1(k_R60_R25, int_to_double(R60), int_to_double(R60Levels), true);
	double_t R81_R25_r = scenario1(k_R81_R25, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R83_R25_r = scenario1(k_R83_R25, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R25_R25_r = scenario1(k_R25_R25, int_to_double(R25), int_to_double(R25Levels), true);
	totalRate = subtract(add(subtract(subtract(add(zero, R56_R25_r), R60_R25_r), R81_R25_r), R83_R25_r), R25_R25_r);
	R56_R25.T = round(inverse(R56_R25_r));
	R60_R25.T = round(inverse(R60_R25_r));
	R81_R25.T = round(inverse(R81_R25_r));
	R83_R25.T = round(inverse(R83_R25_r));
	R25_R25.T = round(inverse(R25_R25_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[53]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[57]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[24]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[53]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[57]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[78]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[80]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R26</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R39_R26_r = scenario1(k_R39_R26, int_to_double(R39), int_to_double(R39Levels), true);
	double_t R26_R26_r = scenario1(k_R26_R26, int_to_double(R26), int_to_double(R26Levels), true);
	double_t R75_R26_r = scenario1(k_R75_R26, int_to_double(R75), int_to_double(R75Levels), true);
	totalRate = subtract(subtract(add(zero, R39_R26_r), R26_R26_r), R75_R26_r);
	R39_R26.T = round(inverse(R39_R26_r));
	R26_R26.T = round(inverse(R26_R26_r));
	R75_R26.T = round(inverse(R75_R26_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[37]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[72]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[25]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[37]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[72]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R27</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R76_R27_r = scenario1(k_R76_R27, int_to_double(R76), int_to_double(R76Levels), true);
	double_t R70_R27_r = scenario1(k_R70_R27, int_to_double(R70), int_to_double(R70Levels), true);
	double_t R27_R27_r = scenario1(k_R27_R27, int_to_double(R27), int_to_double(R27Levels), true);
	totalRate = subtract(subtract(add(zero, R76_R27_r), R70_R27_r), R27_R27_r);
	R76_R27.T = round(inverse(R76_R27_r));
	R70_R27.T = round(inverse(R70_R27_r));
	R27_R27.T = round(inverse(R27_R27_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[73]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[67]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[26]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[73]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[67]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R28</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R29_R28_r = scenario1(k_R29_R28, int_to_double(R29), int_to_double(R29Levels), true);
	double_t R30_R29_R28_r = scenario2_3(k_R30_R29_R28, int_to_double(R29), int_to_double(R29Levels), true, int_to_double(R30), int_to_double(R30Levels), true);
	double_t R28_R28_r = scenario1(k_R28_R28, int_to_double(R28), int_to_double(R28Levels), true);
	totalRate = subtract(add(add(zero, R29_R28_r), R30_R29_R28_r), R28_R28_r);
	R29_R28.T = round(inverse(R29_R28_r));
	R30_R29_R28.T = round(inverse(R30_R29_R28_r));
	R28_R28.T = round(inverse(R28_R28_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[28]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[29]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[27]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[28]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[29]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R29</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R29_R29_r = scenario1(k_R29_R29, int_to_double(R29), int_to_double(R29Levels), true);
	double_t R41_R29_r = scenario1(k_R41_R29, int_to_double(R41), int_to_double(R41Levels), true);
	double_t R27_R29_r = scenario1(k_R27_R29, int_to_double(R27), int_to_double(R27Levels), true);
	totalRate = add(add(subtract(zero, R29_R29_r), R41_R29_r), R27_R29_r);
	R29_R29.T = round(inverse(R29_R29_r));
	R41_R29.T = round(inverse(R41_R29_r));
	R27_R29.T = round(inverse(R27_R29_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[38]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[28]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[38]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[26]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R30</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R81_R30_r = scenario1(k_R81_R30, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R30_R30_r = scenario1(k_R30_R30, int_to_double(R30), int_to_double(R30Levels), true);
	totalRate = subtract(add(zero, R81_R30_r), R30_R30_r);
	R81_R30.T = round(inverse(R81_R30_r));
	R30_R30.T = round(inverse(R30_R30_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[29]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[78]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R31</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R31_r = scenario1(k_R77_R31, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R31_R31_r = scenario1(k_R31_R31, int_to_double(R31), int_to_double(R31Levels), true);
	double_t R7_R31_r = scenario1(k_R7_R31, int_to_double(R7), int_to_double(R7Levels), true);
	totalRate = add(subtract(add(zero, R77_R31_r), R31_R31_r), R7_R31_r);
	R77_R31.T = round(inverse(R77_R31_r));
	R31_R31.T = round(inverse(R31_R31_r));
	R7_R31.T = round(inverse(R7_R31_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[7]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[30]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[7]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R32</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R32_R32_r = scenario1(k_R32_R32, int_to_double(R32), int_to_double(R32Levels), true);
	double_t R33_R32_r = scenario1(k_R33_R32, int_to_double(R33), int_to_double(R33Levels), true);
	double_t R34_R33_R32_r = scenario2_3(k_R34_R33_R32, int_to_double(R33), int_to_double(R33Levels), true, int_to_double(R34), int_to_double(R34Levels), true);
	totalRate = add(add(subtract(zero, R32_R32_r), R33_R32_r), R34_R33_R32_r);
	R32_R32.T = round(inverse(R32_R32_r));
	R33_R32.T = round(inverse(R33_R32_r));
	R34_R33_R32.T = round(inverse(R34_R33_R32_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[32]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[33]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[31]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[32]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[33]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R33</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R33_R33_r = scenario1(k_R33_R33, int_to_double(R33), int_to_double(R33Levels), true);
	double_t R83_R33_r = scenario1(k_R83_R33, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R31_R33_r = scenario1(k_R31_R33, int_to_double(R31), int_to_double(R31Levels), true);
	totalRate = add(subtract(subtract(zero, R33_R33_r), R83_R33_r), R31_R33_r);
	R33_R33.T = round(inverse(R33_R33_r));
	R83_R33.T = round(inverse(R83_R33_r));
	R31_R33.T = round(inverse(R31_R33_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[30]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[32]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[80]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[30]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R34</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R34_r = scenario1(k_R77_R34, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R34_R34_r = scenario1(k_R34_R34, int_to_double(R34), int_to_double(R34Levels), true);
	totalRate = subtract(add(zero, R77_R34_r), R34_R34_r);
	R77_R34.T = round(inverse(R77_R34_r));
	R34_R34.T = round(inverse(R34_R34_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[33]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R35</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R37_R36_R35_r = scenario2_3(k_R37_R36_R35, int_to_double(R36), int_to_double(R36Levels), true, int_to_double(R37), int_to_double(R37Levels), true);
	double_t R35_R35_r = scenario1(k_R35_R35, int_to_double(R35), int_to_double(R35Levels), true);
	double_t R36_R35_r = scenario1(k_R36_R35, int_to_double(R36), int_to_double(R36Levels), true);
	totalRate = add(subtract(add(zero, R37_R36_R35_r), R35_R35_r), R36_R35_r);
	R37_R36_R35.T = round(inverse(R37_R36_R35_r));
	R35_R35.T = round(inverse(R35_R35_r));
	R36_R35.T = round(inverse(R36_R35_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[36]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[35]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[34]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[36]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[35]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R36</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R36_R36_r = scenario1(k_R36_R36, int_to_double(R36), int_to_double(R36Levels), true);
	double_t R31_R36_r = scenario1(k_R31_R36, int_to_double(R31), int_to_double(R31Levels), true);
	totalRate = add(subtract(zero, R36_R36_r), R31_R36_r);
	R36_R36.T = round(inverse(R36_R36_r));
	R31_R36.T = round(inverse(R31_R36_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[30]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[35]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[30]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R37</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R84_R37_r = scenario1(k_R84_R37, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R37_R37_r = scenario1(k_R37_R37, int_to_double(R37), int_to_double(R37Levels), true);
	totalRate = subtract(add(zero, R84_R37_r), R37_R37_r);
	R84_R37.T = round(inverse(R84_R37_r));
	R37_R37.T = round(inverse(R37_R37_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[36]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[81]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R39</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R39_R39_r = scenario1(k_R39_R39, int_to_double(R39), int_to_double(R39Levels), true);
	double_t R88_R39_r = scenario1(k_R88_R39, int_to_double(R88), int_to_double(R88Levels), true);
	totalRate = add(subtract(zero, R39_R39_r), R88_R39_r);
	R39_R39.T = round(inverse(R39_R39_r));
	R88_R39.T = round(inverse(R88_R39_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[85]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[37]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[85]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R41</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R27_R41_r = scenario1(k_R27_R41, int_to_double(R27), int_to_double(R27Levels), true);
	double_t R41_R41_r = scenario1(k_R41_R41, int_to_double(R41), int_to_double(R41Levels), true);
	double_t R43_R41_r = scenario1(k_R43_R41, int_to_double(R43), int_to_double(R43Levels), true);
	double_t R42_R27_R41_r = scenario2_3(k_R42_R27_R41, int_to_double(R27), int_to_double(R27Levels), true, int_to_double(R42), int_to_double(R42Levels), true);
	totalRate = subtract(add(subtract(subtract(zero, R27_R41_r), R41_R41_r), R43_R41_r), R42_R27_R41_r);
	R27_R41.T = round(inverse(R27_R41_r));
	R41_R41.T = round(inverse(R41_R41_r));
	R43_R41.T = round(inverse(R43_R41_r));
	R42_R27_R41.T = round(inverse(R42_R27_R41_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[40]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[39]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[38]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[26]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[40]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[39]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R42</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R70_R42_r = scenario1(k_R70_R42, int_to_double(R70), int_to_double(R70Levels), true);
	double_t R69_R42_r = scenario1(k_R69_R42, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R42_R42_r = scenario1(k_R42_R42, int_to_double(R42), int_to_double(R42Levels), true);
	totalRate = subtract(add(subtract(zero, R70_R42_r), R69_R42_r), R42_R42_r);
	R70_R42.T = round(inverse(R70_R42_r));
	R69_R42.T = round(inverse(R69_R42_r));
	R42_R42.T = round(inverse(R42_R42_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[67]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[39]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[67]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[66]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R44</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R44_R44_r = scenario1(k_R44_R44, int_to_double(R44), int_to_double(R44Levels), true);
	double_t R51_R44_r = scenario1(k_R51_R44, int_to_double(R51), int_to_double(R51Levels), true);
	totalRate = add(subtract(zero, R44_R44_r), R51_R44_r);
	R44_R44.T = round(inverse(R44_R44_r));
	R51_R44.T = round(inverse(R51_R44_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[48]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[41]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[48]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R45</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R41_R45_r = scenario1(k_R41_R45, int_to_double(R41), int_to_double(R41Levels), true);
	double_t R70_R45_r = scenario1(k_R70_R45, int_to_double(R70), int_to_double(R70Levels), true);
	double_t R45_R45_r = scenario1(k_R45_R45, int_to_double(R45), int_to_double(R45Levels), true);
	totalRate = subtract(add(subtract(zero, R41_R45_r), R70_R45_r), R45_R45_r);
	R41_R45.T = round(inverse(R41_R45_r));
	R70_R45.T = round(inverse(R70_R45_r));
	R45_R45.T = round(inverse(R45_R45_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[38]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[67]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[42]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[38]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[67]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R46</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R46_R46_r = scenario1(k_R46_R46, int_to_double(R46), int_to_double(R46Levels), true);
	double_t R64_R46_r = scenario1(k_R64_R46, int_to_double(R64), int_to_double(R64Levels), true);
	totalRate = add(subtract(zero, R46_R46_r), R64_R46_r);
	R46_R46.T = round(inverse(R46_R46_r));
	R64_R46.T = round(inverse(R64_R46_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[43]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[61]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R47</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R47_R47_r = scenario1(k_R47_R47, int_to_double(R47), int_to_double(R47Levels), true);
	double_t R69_R47_r = scenario1(k_R69_R47, int_to_double(R69), int_to_double(R69Levels), true);
	totalRate = add(subtract(zero, R47_R47_r), R69_R47_r);
	R47_R47.T = round(inverse(R47_R47_r));
	R69_R47.T = round(inverse(R69_R47_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[44]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[66]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R48</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R48_R48_r = scenario1(k_R48_R48, int_to_double(R48), int_to_double(R48Levels), true);
	double_t R49_R48_r = scenario1(k_R49_R48, int_to_double(R49), int_to_double(R49Levels), true);
	double_t R50_R49_R48_r = scenario2_3(k_R50_R49_R48, int_to_double(R49), int_to_double(R49Levels), true, int_to_double(R50), int_to_double(R50Levels), true);
	totalRate = add(add(subtract(zero, R48_R48_r), R49_R48_r), R50_R49_R48_r);
	R48_R48.T = round(inverse(R48_R48_r));
	R49_R48.T = round(inverse(R49_R48_r));
	R50_R49_R48.T = round(inverse(R50_R49_R48_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[46]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[47]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[45]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[46]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[47]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R49</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R47_R49_r = scenario1(k_R47_R49, int_to_double(R47), int_to_double(R47Levels), true);
	double_t R49_R49_r = scenario1(k_R49_R49, int_to_double(R49), int_to_double(R49Levels), true);
	totalRate = subtract(add(zero, R47_R49_r), R49_R49_r);
	R47_R49.T = round(inverse(R47_R49_r));
	R49_R49.T = round(inverse(R49_R49_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[44]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[46]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[44]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R50</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R87_R50_r = scenario1(k_R87_R50, int_to_double(R87), int_to_double(R87Levels), true);
	double_t R50_R50_r = scenario1(k_R50_R50, int_to_double(R50), int_to_double(R50Levels), true);
	double_t R64_R50_r = scenario1(k_R64_R50, int_to_double(R64), int_to_double(R64Levels), true);
	double_t R80_R50_r = scenario1(k_R80_R50, int_to_double(R80), int_to_double(R80Levels), true);
	totalRate = subtract(add(subtract(add(zero, R87_R50_r), R50_R50_r), R64_R50_r), R80_R50_r);
	R87_R50.T = round(inverse(R87_R50_r));
	R50_R50.T = round(inverse(R50_R50_r));
	R64_R50.T = round(inverse(R64_R50_r));
	R80_R50.T = round(inverse(R80_R50_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[84]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[77]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[47]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[84]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[61]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[77]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R51</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R51_r = scenario1(k_R77_R51, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R51_R51_r = scenario1(k_R51_R51, int_to_double(R51), int_to_double(R51Levels), true);
	double_t R83_R51_r = scenario1(k_R83_R51, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R64_R51_r = scenario1(k_R64_R51, int_to_double(R64), int_to_double(R64Levels), true);
	double_t R90_R51_r = scenario1(k_R90_R51, int_to_double(R90), int_to_double(R90Levels), true);
	double_t R3_R51_r = scenario1(k_R3_R51, int_to_double(R3), int_to_double(R3Levels), true);
	totalRate = add(subtract(add(add(subtract(add(zero, R77_R51_r), R51_R51_r), R83_R51_r), R64_R51_r), R90_R51_r), R3_R51_r);
	R77_R51.T = round(inverse(R77_R51_r));
	R51_R51.T = round(inverse(R51_R51_r));
	R83_R51.T = round(inverse(R83_R51_r));
	R64_R51.T = round(inverse(R64_R51_r));
	R90_R51.T = round(inverse(R90_R51_r));
	R3_R51.T = round(inverse(R3_R51_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[87]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1064">reacting[3]?</label>
    <label kind="assignment" x="-1528" y="-1048">update()</label>
    <nail x="-1552" y="-1048"/>
    <nail x="-1376" y="-1048"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[48]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[80]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[61]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[87]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-936">reacting[3]?</label>
    <nail x="-1752" y="-920"/>
    <nail x="-1840" y="-920"/>
  </transition>
</template>


<template>
  <name>Reactant_R52</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R55_R53_R52_r = scenario2_3(k_R55_R53_R52, int_to_double(R53), int_to_double(R53Levels), true, int_to_double(R55), int_to_double(R55Levels), true);
	double_t R53_R52_r = scenario1(k_R53_R52, int_to_double(R53), int_to_double(R53Levels), true);
	double_t R52_R52_r = scenario1(k_R52_R52, int_to_double(R52), int_to_double(R52Levels), true);
	totalRate = subtract(add(add(zero, R55_R53_R52_r), R53_R52_r), R52_R52_r);
	R55_R53_R52.T = round(inverse(R55_R53_R52_r));
	R53_R52.T = round(inverse(R53_R52_r));
	R52_R52.T = round(inverse(R52_R52_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[52]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[50]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[49]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[52]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[50]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R53</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R84_R53_r = scenario1(k_R84_R53, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R7_R53_r = scenario1(k_R7_R53, int_to_double(R7), int_to_double(R7Levels), true);
	double_t R53_R53_r = scenario1(k_R53_R53, int_to_double(R53), int_to_double(R53Levels), true);
	totalRate = subtract(add(subtract(zero, R84_R53_r), R7_R53_r), R53_R53_r);
	R84_R53.T = round(inverse(R84_R53_r));
	R7_R53.T = round(inverse(R7_R53_r));
	R53_R53.T = round(inverse(R53_R53_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[7]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[50]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[81]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[7]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R55</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R55_r = scenario1(k_R77_R55, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R54_R55_r = scenario1(k_R54_R55, int_to_double(R54), int_to_double(R54Levels), true);
	double_t R55_R55_r = scenario1(k_R55_R55, int_to_double(R55), int_to_double(R55Levels), true);
	double_t R7_R55_r = scenario1(k_R7_R55, int_to_double(R7), int_to_double(R7Levels), true);
	totalRate = add(subtract(add(add(zero, R77_R55_r), R54_R55_r), R55_R55_r), R7_R55_r);
	R77_R55.T = round(inverse(R77_R55_r));
	R54_R55.T = round(inverse(R54_R55_r));
	R55_R55.T = round(inverse(R55_R55_r));
	R7_R55.T = round(inverse(R7_R55_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[51]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[7]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[52]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[51]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[7]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R56</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R57_R56_r = scenario1(k_R57_R56, int_to_double(R57), int_to_double(R57Levels), true);
	double_t R56_R56_r = scenario1(k_R56_R56, int_to_double(R56), int_to_double(R56Levels), true);
	double_t R58_R57_R56_r = scenario2_3(k_R58_R57_R56, int_to_double(R57), int_to_double(R57Levels), true, int_to_double(R58), int_to_double(R58Levels), true);
	totalRate = add(subtract(add(zero, R57_R56_r), R56_R56_r), R58_R57_R56_r);
	R57_R56.T = round(inverse(R57_R56_r));
	R56_R56.T = round(inverse(R56_R56_r));
	R58_R57_R56.T = round(inverse(R58_R57_R56_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[54]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[55]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[53]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[54]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[55]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R57</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R57_R57_r = scenario1(k_R57_R57, int_to_double(R57), int_to_double(R57Levels), true);
	double_t R81_R57_r = scenario1(k_R81_R57, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R83_R57_r = scenario1(k_R83_R57, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R92_R57_r = scenario1(k_R92_R57, int_to_double(R92), int_to_double(R92Levels), true);
	double_t R45_R57_r = scenario1(k_R45_R57, int_to_double(R45), int_to_double(R45Levels), true);
	totalRate = subtract(add(add(subtract(subtract(zero, R57_R57_r), R81_R57_r), R83_R57_r), R92_R57_r), R45_R57_r);
	R57_R57.T = round(inverse(R57_R57_r));
	R81_R57.T = round(inverse(R81_R57_r));
	R83_R57.T = round(inverse(R83_R57_r));
	R92_R57.T = round(inverse(R92_R57_r));
	R45_R57.T = round(inverse(R45_R57_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[89]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[42]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[54]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[78]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[80]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[89]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[42]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R58</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R58_r = scenario1(k_R77_R58, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R58_R58_r = scenario1(k_R58_R58, int_to_double(R58), int_to_double(R58Levels), true);
	double_t R83_R58_r = scenario1(k_R83_R58, int_to_double(R83), int_to_double(R83Levels), true);
	totalRate = add(subtract(add(zero, R77_R58_r), R58_R58_r), R83_R58_r);
	R77_R58.T = round(inverse(R77_R58_r));
	R58_R58.T = round(inverse(R58_R58_r));
	R83_R58.T = round(inverse(R83_R58_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[55]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[80]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R59</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R59_r = scenario1(k_R77_R59, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R11_R92_R59_r = scenario2_3(k_R11_R92_R59, int_to_double(R92), int_to_double(R92Levels), true, int_to_double(R11), int_to_double(R11Levels), true);
	double_t R44_R59_r = scenario1(k_R44_R59, int_to_double(R44), int_to_double(R44Levels), true);
	double_t R64_R59_r = scenario1(k_R64_R59, int_to_double(R64), int_to_double(R64Levels), true);
	double_t R92_R59_r = scenario1(k_R92_R59, int_to_double(R92), int_to_double(R92Levels), true);
	double_t R46_R59_r = scenario1(k_R46_R59, int_to_double(R46), int_to_double(R46Levels), true);
	double_t R59_R59_r = scenario1(k_R59_R59, int_to_double(R59), int_to_double(R59Levels), true);
	totalRate = subtract(add(add(add(subtract(add(add(zero, R77_R59_r), R11_R92_R59_r), R44_R59_r), R64_R59_r), R92_R59_r), R46_R59_r), R59_R59_r);
	R77_R59.T = round(inverse(R77_R59_r));
	R11_R92_R59.T = round(inverse(R11_R92_R59_r));
	R44_R59.T = round(inverse(R44_R59_r));
	R64_R59.T = round(inverse(R64_R59_r));
	R92_R59.T = round(inverse(R92_R59_r));
	R46_R59.T = round(inverse(R46_R59_r));
	R59_R59.T = round(inverse(R59_R59_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[11]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[89]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1064">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-1048">update()</label>
    <nail x="-1552" y="-1048"/>
    <nail x="-1376" y="-1048"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1104">reacting[43]?</label>
    <label kind="assignment" x="-1528" y="-1088">update()</label>
    <nail x="-1552" y="-1088"/>
    <nail x="-1376" y="-1088"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[56]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[11]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[89]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[41]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-936">reacting[61]?</label>
    <nail x="-1752" y="-920"/>
    <nail x="-1840" y="-920"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-984">reacting[43]?</label>
    <nail x="-1752" y="-968"/>
    <nail x="-1840" y="-968"/>
  </transition>
</template>


<template>
  <name>Reactant_R60</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R61_R60_r = scenario1(k_R61_R60, int_to_double(R61), int_to_double(R61Levels), true);
	double_t R63_R61_R60_r = scenario2_3(k_R63_R61_R60, int_to_double(R61), int_to_double(R61Levels), true, int_to_double(R63), int_to_double(R63Levels), true);
	double_t R60_R60_r = scenario1(k_R60_R60, int_to_double(R60), int_to_double(R60Levels), true);
	totalRate = subtract(add(add(zero, R61_R60_r), R63_R61_R60_r), R60_R60_r);
	R61_R60.T = round(inverse(R61_R60_r));
	R63_R61_R60.T = round(inverse(R63_R61_R60_r));
	R60_R60.T = round(inverse(R60_R60_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[58]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[60]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[57]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[58]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[60]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R61</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R61_R61_r = scenario1(k_R61_R61, int_to_double(R61), int_to_double(R61Levels), true);
	double_t R62_R61_r = scenario1(k_R62_R61, int_to_double(R62), int_to_double(R62Levels), true);
	double_t R23_R61_r = scenario1(k_R23_R61, int_to_double(R23), int_to_double(R23Levels), true);
	totalRate = subtract(add(subtract(zero, R61_R61_r), R62_R61_r), R23_R61_r);
	R61_R61.T = round(inverse(R61_R61_r));
	R62_R61.T = round(inverse(R62_R61_r));
	R23_R61.T = round(inverse(R23_R61_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[59]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[22]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[58]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[59]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[22]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R63</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R81_R63_r = scenario1(k_R81_R63, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R83_R63_r = scenario1(k_R83_R63, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R63_R63_r = scenario1(k_R63_R63, int_to_double(R63), int_to_double(R63Levels), true);
	double_t R23_R63_r = scenario1(k_R23_R63, int_to_double(R23), int_to_double(R23Levels), true);
	totalRate = subtract(subtract(add(add(zero, R81_R63_r), R83_R63_r), R63_R63_r), R23_R63_r);
	R81_R63.T = round(inverse(R81_R63_r));
	R83_R63.T = round(inverse(R83_R63_r));
	R63_R63.T = round(inverse(R63_R63_r));
	R23_R63.T = round(inverse(R23_R63_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[22]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[60]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[78]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[80]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[22]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R64</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R4_R64_r = scenario1(k_R4_R64, int_to_double(R4), int_to_double(R4Levels), true);
	double_t R32_R64_r = scenario1(k_R32_R64, int_to_double(R32), int_to_double(R32Levels), true);
	double_t R64_R64_r = scenario1(k_R64_R64, int_to_double(R64), int_to_double(R64Levels), true);
	totalRate = subtract(add(add(zero, R4_R64_r), R32_R64_r), R64_R64_r);
	R4_R64.T = round(inverse(R4_R64_r));
	R32_R64.T = round(inverse(R32_R64_r));
	R64_R64.T = round(inverse(R64_R64_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[4]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[31]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[61]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[4]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[31]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R65</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R71_R65_r = scenario1(k_R71_R65, int_to_double(R71), int_to_double(R71Levels), true);
	double_t R84_R65_r = scenario1(k_R84_R65, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R65_R65_r = scenario1(k_R65_R65, int_to_double(R65), int_to_double(R65Levels), true);
	totalRate = subtract(add(add(zero, R71_R65_r), R84_R65_r), R65_R65_r);
	R71_R65.T = round(inverse(R71_R65_r));
	R84_R65.T = round(inverse(R84_R65_r));
	R65_R65.T = round(inverse(R65_R65_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[68]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[62]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[68]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[81]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R66</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R66_R66_r = scenario1(k_R66_R66, int_to_double(R66), int_to_double(R66Levels), true);
	double_t R67_R66_r = scenario1(k_R67_R66, int_to_double(R67), int_to_double(R67Levels), true);
	double_t R68_R67_R66_r = scenario2_3(k_R68_R67_R66, int_to_double(R67), int_to_double(R67Levels), true, int_to_double(R68), int_to_double(R68Levels), true);
	totalRate = add(add(subtract(zero, R66_R66_r), R67_R66_r), R68_R67_R66_r);
	R66_R66.T = round(inverse(R66_R66_r));
	R67_R66.T = round(inverse(R67_R66_r));
	R68_R67_R66.T = round(inverse(R68_R67_R66_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[64]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[65]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[63]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[64]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[65]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R67</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R67_R67_r = scenario1(k_R67_R67, int_to_double(R67), int_to_double(R67Levels), true);
	double_t R48_R67_r = scenario1(k_R48_R67, int_to_double(R48), int_to_double(R48Levels), true);
	double_t R76_R67_r = scenario1(k_R76_R67, int_to_double(R76), int_to_double(R76Levels), true);
	totalRate = add(add(subtract(zero, R67_R67_r), R48_R67_r), R76_R67_r);
	R67_R67.T = round(inverse(R67_R67_r));
	R48_R67.T = round(inverse(R48_R67_r));
	R76_R67.T = round(inverse(R76_R67_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[45]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[73]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[64]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[45]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[73]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R68</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R68_r = scenario1(k_R77_R68, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R68_R68_r = scenario1(k_R68_R68, int_to_double(R68), int_to_double(R68Levels), true);
	totalRate = subtract(add(zero, R77_R68_r), R68_R68_r);
	R77_R68.T = round(inverse(R77_R68_r));
	R68_R68.T = round(inverse(R68_R68_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[65]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R69</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R47_R69_r = scenario1(k_R47_R69, int_to_double(R47), int_to_double(R47Levels), true);
	double_t R71_R69_r = scenario1(k_R71_R69, int_to_double(R71), int_to_double(R71Levels), true);
	double_t R69_R69_r = scenario1(k_R69_R69, int_to_double(R69), int_to_double(R69Levels), true);
	totalRate = subtract(add(add(zero, R47_R69_r), R71_R69_r), R69_R69_r);
	R47_R69.T = round(inverse(R47_R69_r));
	R71_R69.T = round(inverse(R71_R69_r));
	R69_R69.T = round(inverse(R69_R69_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[44]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[68]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[66]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[44]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[68]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R70</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R69_R70_r = scenario1(k_R69_R70, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R70_R70_r = scenario1(k_R70_R70, int_to_double(R70), int_to_double(R70Levels), true);
	totalRate = subtract(add(zero, R69_R70_r), R70_R70_r);
	R69_R70.T = round(inverse(R69_R70_r));
	R70_R70.T = round(inverse(R70_R70_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[67]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[66]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R71</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R71_R71_r = scenario1(k_R71_R71, int_to_double(R71), int_to_double(R71Levels), true);
	double_t R72_R71_r = scenario1(k_R72_R71, int_to_double(R72), int_to_double(R72Levels), true);
	double_t R73_R72_R71_r = scenario2_3(k_R73_R72_R71, int_to_double(R72), int_to_double(R72Levels), true, int_to_double(R73), int_to_double(R73Levels), true);
	totalRate = add(add(subtract(zero, R71_R71_r), R72_R71_r), R73_R72_R71_r);
	R71_R71.T = round(inverse(R71_R71_r));
	R72_R71.T = round(inverse(R72_R71_r));
	R73_R72_R71.T = round(inverse(R73_R72_R71_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[69]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[70]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[68]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[69]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[70]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R72</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R74_R72_r = scenario1(k_R74_R72, int_to_double(R74), int_to_double(R74Levels), true);
	double_t R72_R72_r = scenario1(k_R72_R72, int_to_double(R72), int_to_double(R72Levels), true);
	totalRate = subtract(add(zero, R74_R72_r), R72_R72_r);
	R74_R72.T = round(inverse(R74_R72_r));
	R72_R72.T = round(inverse(R72_R72_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[71]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[69]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[71]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R73</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R84_R73_r = scenario1(k_R84_R73, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R83_R73_r = scenario1(k_R83_R73, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R44_R73_r = scenario1(k_R44_R73, int_to_double(R44), int_to_double(R44Levels), true);
	double_t R80_R73_r = scenario1(k_R80_R73, int_to_double(R80), int_to_double(R80Levels), true);
	double_t R73_R73_r = scenario1(k_R73_R73, int_to_double(R73), int_to_double(R73Levels), true);
	totalRate = subtract(subtract(add(add(add(zero, R84_R73_r), R83_R73_r), R44_R73_r), R80_R73_r), R73_R73_r);
	R84_R73.T = round(inverse(R84_R73_r));
	R83_R73.T = round(inverse(R83_R73_r));
	R44_R73.T = round(inverse(R44_R73_r));
	R80_R73.T = round(inverse(R80_R73_r));
	R73_R73.T = round(inverse(R73_R73_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[77]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[70]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[81]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[80]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[41]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[77]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R74</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R74_R74_r = scenario1(k_R74_R74, int_to_double(R74), int_to_double(R74Levels), true);
	double_t R69_R74_r = scenario1(k_R69_R74, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R81_R74_r = scenario1(k_R81_R74, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R84_R74_r = scenario1(k_R84_R74, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R44_R84_R74_r = scenario2_3(k_R44_R84_R74, int_to_double(R84), int_to_double(R84Levels), true, int_to_double(R44), int_to_double(R44Levels), true);
	totalRate = add(add(add(add(subtract(zero, R74_R74_r), R69_R74_r), R81_R74_r), R84_R74_r), R44_R84_R74_r);
	R74_R74.T = round(inverse(R74_R74_r));
	R69_R74.T = round(inverse(R69_R74_r));
	R81_R74.T = round(inverse(R81_R74_r));
	R84_R74.T = round(inverse(R84_R74_r));
	R44_R84_R74.T = round(inverse(R44_R84_R74_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[71]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[66]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[78]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[81]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[41]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R75</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R75_R75_r = scenario1(k_R75_R75, int_to_double(R75), int_to_double(R75Levels), true);
	double_t R8_R75_r = scenario1(k_R8_R75, int_to_double(R8), int_to_double(R8Levels), true);
	double_t R82_R75_r = scenario1(k_R82_R75, int_to_double(R82), int_to_double(R82Levels), true);
	totalRate = subtract(add(subtract(zero, R75_R75_r), R8_R75_r), R82_R75_r);
	R75_R75.T = round(inverse(R75_R75_r));
	R8_R75.T = round(inverse(R8_R75_r));
	R82_R75.T = round(inverse(R82_R75_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[8]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[79]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[72]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[8]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[79]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R76</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R32_R76_r = scenario1(k_R32_R76, int_to_double(R32), int_to_double(R32Levels), true);
	double_t R88_R76_r = scenario1(k_R88_R76, int_to_double(R88), int_to_double(R88Levels), true);
	double_t R8_R76_r = scenario1(k_R8_R76, int_to_double(R8), int_to_double(R8Levels), true);
	double_t R76_R76_r = scenario1(k_R76_R76, int_to_double(R76), int_to_double(R76Levels), true);
	double_t R35_R76_r = scenario1(k_R35_R76, int_to_double(R35), int_to_double(R35Levels), true);
	totalRate = add(subtract(add(add(add(zero, R32_R76_r), R88_R76_r), R8_R76_r), R76_R76_r), R35_R76_r);
	R32_R76.T = round(inverse(R32_R76_r));
	R88_R76.T = round(inverse(R88_R76_r));
	R8_R76.T = round(inverse(R8_R76_r));
	R76_R76.T = round(inverse(R76_R76_r));
	R35_R76.T = round(inverse(R35_R76_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[31]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[85]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[8]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[34]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[73]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[31]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[85]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[8]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[34]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R77</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R78_R77_r = scenario1(k_R78_R77, int_to_double(R78), int_to_double(R78Levels), true);
	double_t R77_R77_r = scenario1(k_R77_R77, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R79_R78_R77_r = scenario2_3(k_R79_R78_R77, int_to_double(R78), int_to_double(R78Levels), true, int_to_double(R79), int_to_double(R79Levels), true);
	totalRate = add(subtract(add(zero, R78_R77_r), R77_R77_r), R79_R78_R77_r);
	R78_R77.T = round(inverse(R78_R77_r));
	R77_R77.T = round(inverse(R77_R77_r));
	R79_R78_R77.T = round(inverse(R79_R78_R77_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[75]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[76]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[74]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[75]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[76]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R78</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R78_R78_r = scenario1(k_R78_R78, int_to_double(R78), int_to_double(R78Levels), true);
	double_t R69_R78_r = scenario1(k_R69_R78, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R27_R78_r = scenario1(k_R27_R78, int_to_double(R27), int_to_double(R27Levels), true);
	double_t R12_R78_r = scenario1(k_R12_R78, int_to_double(R12), int_to_double(R12Levels), true);
	double_t R84_R78_r = scenario1(k_R84_R78, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R23_R78_r = scenario1(k_R23_R78, int_to_double(R23), int_to_double(R23Levels), true);
	double_t R4_R78_r = scenario1(k_R4_R78, int_to_double(R4), int_to_double(R4Levels), true);
	double_t R60_R78_r = scenario1(k_R60_R78, int_to_double(R60), int_to_double(R60Levels), true);
	double_t R81_R45_R78_r = scenario2_3(k_R81_R45_R78, int_to_double(R45), int_to_double(R45Levels), true, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R45_R78_r = scenario1(k_R45_R78, int_to_double(R45), int_to_double(R45Levels), true);
	totalRate = subtract(subtract(subtract(add(add(subtract(subtract(add(add(subtract(zero, R78_R78_r), R69_R78_r), R27_R78_r), R12_R78_r), R84_R78_r), R23_R78_r), R4_R78_r), R60_R78_r), R81_R45_R78_r), R45_R78_r);
	R78_R78.T = round(inverse(R78_R78_r));
	R69_R78.T = round(inverse(R69_R78_r));
	R27_R78.T = round(inverse(R27_R78_r));
	R12_R78.T = round(inverse(R12_R78_r));
	R84_R78.T = round(inverse(R84_R78_r));
	R23_R78.T = round(inverse(R23_R78_r));
	R4_R78.T = round(inverse(R4_R78_r));
	R60_R78.T = round(inverse(R60_R78_r));
	R81_R45_R78.T = round(inverse(R81_R45_R78_r));
	R45_R78.T = round(inverse(R45_R78_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[12]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1064">reacting[22]?</label>
    <label kind="assignment" x="-1528" y="-1048">update()</label>
    <nail x="-1552" y="-1048"/>
    <nail x="-1376" y="-1048"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1104">reacting[4]?</label>
    <label kind="assignment" x="-1528" y="-1088">update()</label>
    <nail x="-1552" y="-1088"/>
    <nail x="-1376" y="-1088"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1144">reacting[57]?</label>
    <label kind="assignment" x="-1528" y="-1128">update()</label>
    <nail x="-1552" y="-1128"/>
    <nail x="-1376" y="-1128"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1184">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-1168">update()</label>
    <nail x="-1552" y="-1168"/>
    <nail x="-1376" y="-1168"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1224">reacting[42]?</label>
    <label kind="assignment" x="-1528" y="-1208">update()</label>
    <nail x="-1552" y="-1208"/>
    <nail x="-1376" y="-1208"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[75]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[66]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[26]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[12]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[81]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-936">reacting[22]?</label>
    <nail x="-1752" y="-920"/>
    <nail x="-1840" y="-920"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-984">reacting[4]?</label>
    <nail x="-1752" y="-968"/>
    <nail x="-1840" y="-968"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-1032">reacting[57]?</label>
    <nail x="-1752" y="-1016"/>
    <nail x="-1840" y="-1016"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-1080">reacting[78]?</label>
    <nail x="-1752" y="-1064"/>
    <nail x="-1840" y="-1064"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-1128">reacting[42]?</label>
    <nail x="-1752" y="-1112"/>
    <nail x="-1840" y="-1112"/>
  </transition>
</template>


<template>
  <name>Reactant_R79</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R65_R79_r = scenario1(k_R65_R79, int_to_double(R65), int_to_double(R65Levels), true);
	double_t R77_R79_r = scenario1(k_R77_R79, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R83_R65_R79_r = scenario2_3(k_R83_R65_R79, int_to_double(R65), int_to_double(R65Levels), true, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R56_R79_r = scenario1(k_R56_R79, int_to_double(R56), int_to_double(R56Levels), true);
	double_t R79_R79_r = scenario1(k_R79_R79, int_to_double(R79), int_to_double(R79Levels), true);
	double_t R23_R79_r = scenario1(k_R23_R79, int_to_double(R23), int_to_double(R23Levels), true);
	double_t R60_R79_r = scenario1(k_R60_R79, int_to_double(R60), int_to_double(R60Levels), true);
	double_t R52_R79_r = scenario1(k_R52_R79, int_to_double(R52), int_to_double(R52Levels), true);
	double_t R46_R79_r = scenario1(k_R46_R79, int_to_double(R46), int_to_double(R46Levels), true);
	totalRate = add(add(subtract(add(subtract(add(subtract(add(subtract(zero, R65_R79_r), R77_R79_r), R83_R65_R79_r), R56_R79_r), R79_R79_r), R23_R79_r), R60_R79_r), R52_R79_r), R46_R79_r);
	R65_R79.T = round(inverse(R65_R79_r));
	R77_R79.T = round(inverse(R77_R79_r));
	R83_R65_R79.T = round(inverse(R83_R65_R79_r));
	R56_R79.T = round(inverse(R56_R79_r));
	R79_R79.T = round(inverse(R79_R79_r));
	R23_R79.T = round(inverse(R23_R79_r));
	R60_R79.T = round(inverse(R60_R79_r));
	R52_R79.T = round(inverse(R52_R79_r));
	R46_R79.T = round(inverse(R46_R79_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[62]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[53]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1064">reacting[22]?</label>
    <label kind="assignment" x="-1528" y="-1048">update()</label>
    <nail x="-1552" y="-1048"/>
    <nail x="-1376" y="-1048"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1104">reacting[57]?</label>
    <label kind="assignment" x="-1528" y="-1088">update()</label>
    <nail x="-1552" y="-1088"/>
    <nail x="-1376" y="-1088"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1144">reacting[49]?</label>
    <label kind="assignment" x="-1528" y="-1128">update()</label>
    <nail x="-1552" y="-1128"/>
    <nail x="-1376" y="-1128"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1184">reacting[43]?</label>
    <label kind="assignment" x="-1528" y="-1168">update()</label>
    <nail x="-1552" y="-1168"/>
    <nail x="-1376" y="-1168"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[76]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[62]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[74]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[80]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[53]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-936">reacting[22]?</label>
    <nail x="-1752" y="-920"/>
    <nail x="-1840" y="-920"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-984">reacting[57]?</label>
    <nail x="-1752" y="-968"/>
    <nail x="-1840" y="-968"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-1032">reacting[49]?</label>
    <nail x="-1752" y="-1016"/>
    <nail x="-1840" y="-1016"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-1080">reacting[43]?</label>
    <nail x="-1752" y="-1064"/>
    <nail x="-1840" y="-1064"/>
  </transition>
</template>


<template>
  <name>Reactant_R80</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R83_R80_r = scenario1(k_R83_R80, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R32_R80_r = scenario1(k_R32_R80, int_to_double(R32), int_to_double(R32Levels), true);
	double_t R80_R80_r = scenario1(k_R80_R80, int_to_double(R80), int_to_double(R80Levels), true);
	double_t R48_R80_r = scenario1(k_R48_R80, int_to_double(R48), int_to_double(R48Levels), true);
	double_t R35_R80_r = scenario1(k_R35_R80, int_to_double(R35), int_to_double(R35Levels), true);
	totalRate = add(add(subtract(add(subtract(zero, R83_R80_r), R32_R80_r), R80_R80_r), R48_R80_r), R35_R80_r);
	R83_R80.T = round(inverse(R83_R80_r));
	R32_R80.T = round(inverse(R32_R80_r));
	R80_R80.T = round(inverse(R80_R80_r));
	R48_R80.T = round(inverse(R48_R80_r));
	R35_R80.T = round(inverse(R35_R80_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[31]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[45]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[34]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[77]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[80]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[31]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[45]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[34]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R81</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R27_R81_r = scenario1(k_R27_R81, int_to_double(R27), int_to_double(R27Levels), true);
	double_t R12_R81_r = scenario1(k_R12_R81, int_to_double(R12), int_to_double(R12Levels), true);
	double_t R81_R81_r = scenario1(k_R81_R81, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R82_R81_r = scenario1(k_R82_R81, int_to_double(R82), int_to_double(R82Levels), true);
	double_t R87_R81_r = scenario1(k_R87_R81, int_to_double(R87), int_to_double(R87Levels), true);
	totalRate = add(subtract(subtract(subtract(subtract(zero, R27_R81_r), R12_R81_r), R81_R81_r), R82_R81_r), R87_R81_r);
	R27_R81.T = round(inverse(R27_R81_r));
	R12_R81.T = round(inverse(R12_R81_r));
	R81_R81.T = round(inverse(R81_R81_r));
	R82_R81.T = round(inverse(R82_R81_r));
	R87_R81.T = round(inverse(R87_R81_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[12]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[79]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[84]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[78]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[26]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[12]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[79]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[84]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R82</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R83_R82_r = scenario1(k_R83_R82, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R81_R82_r = scenario1(k_R81_R82, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R80_R82_r = scenario1(k_R80_R82, int_to_double(R80), int_to_double(R80Levels), true);
	double_t R64_R82_r = scenario1(k_R64_R82, int_to_double(R64), int_to_double(R64Levels), true);
	double_t R82_R82_r = scenario1(k_R82_R82, int_to_double(R82), int_to_double(R82Levels), true);
	totalRate = subtract(add(add(add(add(zero, R83_R82_r), R81_R82_r), R80_R82_r), R64_R82_r), R82_R82_r);
	R83_R82.T = round(inverse(R83_R82_r));
	R81_R82.T = round(inverse(R81_R82_r));
	R80_R82.T = round(inverse(R80_R82_r));
	R64_R82.T = round(inverse(R64_R82_r));
	R82_R82.T = round(inverse(R82_R82_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[80]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[77]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[79]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[80]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[78]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[77]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[61]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R83</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R27_R83_r = scenario1(k_R27_R83, int_to_double(R27), int_to_double(R27Levels), true);
	double_t R83_R83_r = scenario1(k_R83_R83, int_to_double(R83), int_to_double(R83Levels), true);
	double_t R75_R83_r = scenario1(k_R75_R83, int_to_double(R75), int_to_double(R75Levels), true);
	totalRate = add(subtract(subtract(zero, R27_R83_r), R83_R83_r), R75_R83_r);
	R27_R83.T = round(inverse(R27_R83_r));
	R83_R83.T = round(inverse(R83_R83_r));
	R75_R83.T = round(inverse(R75_R83_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[26]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[72]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[80]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[26]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[72]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R84</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R84_R84_r = scenario1(k_R84_R84, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R86_R85_R84_r = scenario2_3(k_R86_R85_R84, int_to_double(R85), int_to_double(R85Levels), true, int_to_double(R86), int_to_double(R86Levels), true);
	double_t R85_R84_r = scenario1(k_R85_R84, int_to_double(R85), int_to_double(R85Levels), true);
	totalRate = add(add(subtract(zero, R84_R84_r), R86_R85_R84_r), R85_R84_r);
	R84_R84.T = round(inverse(R84_R84_r));
	R86_R85_R84.T = round(inverse(R86_R85_R84_r));
	R85_R84.T = round(inverse(R85_R84_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[83]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[82]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[81]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[83]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[82]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R85</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R77_R85_r = scenario1(k_R77_R85, int_to_double(R77), int_to_double(R77Levels), true);
	double_t R69_R85_r = scenario1(k_R69_R85, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R81_R85_r = scenario1(k_R81_R85, int_to_double(R81), int_to_double(R81Levels), true);
	double_t R7_R85_r = scenario1(k_R7_R85, int_to_double(R7), int_to_double(R7Levels), true);
	double_t R85_R85_r = scenario1(k_R85_R85, int_to_double(R85), int_to_double(R85Levels), true);
	totalRate = subtract(subtract(add(add(subtract(zero, R77_R85_r), R69_R85_r), R81_R85_r), R7_R85_r), R85_R85_r);
	R77_R85.T = round(inverse(R77_R85_r));
	R69_R85.T = round(inverse(R69_R85_r));
	R81_R85.T = round(inverse(R81_R85_r));
	R7_R85.T = round(inverse(R7_R85_r));
	R85_R85.T = round(inverse(R85_R85_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[74]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[78]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[7]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[82]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[74]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[66]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[78]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[7]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R86</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R65_R86_r = scenario1(k_R65_R86, int_to_double(R65), int_to_double(R65Levels), true);
	double_t R86_R86_r = scenario1(k_R86_R86, int_to_double(R86), int_to_double(R86Levels), true);
	double_t R84_R86_r = scenario1(k_R84_R86, int_to_double(R84), int_to_double(R84Levels), true);
	double_t R69_R86_r = scenario1(k_R69_R86, int_to_double(R69), int_to_double(R69Levels), true);
	double_t R92_R86_r = scenario1(k_R92_R86, int_to_double(R92), int_to_double(R92Levels), true);
	totalRate = add(add(add(subtract(add(zero, R65_R86_r), R86_R86_r), R84_R86_r), R69_R86_r), R92_R86_r);
	R65_R86.T = round(inverse(R65_R86_r));
	R86_R86.T = round(inverse(R86_R86_r));
	R84_R86.T = round(inverse(R84_R86_r));
	R69_R86.T = round(inverse(R69_R86_r));
	R92_R86.T = round(inverse(R92_R86_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[62]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[81]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[66]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[89]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[83]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[62]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[81]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[66]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[89]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R87</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R44_R87_r = scenario1(k_R44_R87, int_to_double(R44), int_to_double(R44Levels), true);
	double_t R87_R87_r = scenario1(k_R87_R87, int_to_double(R87), int_to_double(R87Levels), true);
	totalRate = subtract(add(zero, R44_R87_r), R87_R87_r);
	R44_R87.T = round(inverse(R44_R87_r));
	R87_R87.T = round(inverse(R87_R87_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[84]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[41]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R88</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R10_R88_r = scenario1(k_R10_R88, int_to_double(R10), int_to_double(R10Levels), true);
	double_t R60_R88_r = scenario1(k_R60_R88, int_to_double(R60), int_to_double(R60Levels), true);
	double_t R44_R88_r = scenario1(k_R44_R88, int_to_double(R44), int_to_double(R44Levels), true);
	double_t R88_R88_r = scenario1(k_R88_R88, int_to_double(R88), int_to_double(R88Levels), true);
	double_t R89_R88_r = scenario1(k_R89_R88, int_to_double(R89), int_to_double(R89Levels), true);
	totalRate = add(subtract(add(subtract(add(zero, R10_R88_r), R60_R88_r), R44_R88_r), R88_R88_r), R89_R88_r);
	R10_R88.T = round(inverse(R10_R88_r));
	R60_R88.T = round(inverse(R60_R88_r));
	R44_R88.T = round(inverse(R44_R88_r));
	R88_R88.T = round(inverse(R88_R88_r));
	R89_R88.T = round(inverse(R89_R88_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[10]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[57]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[41]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[86]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[85]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[10]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[57]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[41]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[86]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
</template>


<template>
  <name>Reactant_R90</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R28_R90_r = scenario1(k_R28_R90, int_to_double(R28), int_to_double(R28Levels), true);
	double_t R90_R90_r = scenario1(k_R90_R90, int_to_double(R90), int_to_double(R90Levels), true);
	double_t R64_R90_r = scenario1(k_R64_R90, int_to_double(R64), int_to_double(R64Levels), true);
	totalRate = add(subtract(add(zero, R28_R90_r), R90_R90_r), R64_R90_r);
	R28_R90.T = round(inverse(R28_R90_r));
	R90_R90.T = round(inverse(R90_R90_r));
	R64_R90.T = round(inverse(R64_R90_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[27]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[61]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[87]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[27]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[61]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R91</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R91_R91_r = scenario1(k_R91_R91, int_to_double(R91), int_to_double(R91Levels), true);
	double_t R18_R19_R91_r = scenario2_3(k_R18_R19_R91, int_to_double(R19), int_to_double(R19Levels), true, int_to_double(R18), int_to_double(R18Levels), true);
	double_t R19_R91_r = scenario1(k_R19_R91, int_to_double(R19), int_to_double(R19Levels), true);
	totalRate = add(add(subtract(zero, R91_R91_r), R18_R19_R91_r), R19_R91_r);
	R91_R91.T = round(inverse(R91_R91_r));
	R18_R19_R91.T = round(inverse(R18_R19_R91_r));
	R19_R91.T = round(inverse(R19_R91_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[18]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[19]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[88]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[18]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[19]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R92</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta;
time_t tL, tU;
clock c;
double_t totalRate;


void update() {
	double_t R87_R92_r = scenario1(k_R87_R92, int_to_double(R87), int_to_double(R87Levels), true);
	double_t R92_R92_r = scenario1(k_R92_R92, int_to_double(R92), int_to_double(R92Levels), true);
	double_t R8_R92_r = scenario1(k_R8_R92, int_to_double(R8), int_to_double(R8Levels), true);
	totalRate = add(subtract(add(zero, R87_R92_r), R92_R92_r), R8_R92_r);
	R87_R92.T = round(inverse(R87_R92_r));
	R92_R92.T = round(inverse(R92_R92_r));
	R8_R92.T = round(inverse(R8_R92_r));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	update();
}

bool can_react() {
	return (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[84]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[8]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[89]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[84]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[8]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>



<system>
R0_ = Reactant_R0(R0, 100);
R1_ = Reactant_R1(R1, 100);
R2_ = Reactant_R2(R2, 100);
R3_ = Reactant_R3(R3, 100);
R4_ = Reactant_R4(R4, 100);
R5_ = Reactant_R5(R5, 100);
R6_ = Reactant_R6(R6, 100);
R7_ = Reactant_R7(R7, 100);
R8_ = Reactant_R8(R8, 100);
R10_ = Reactant_R10(R10, 100);
R11_ = Reactant_R11(R11, 100);
R12_ = Reactant_R12(R12, 100);
R13_ = Reactant_R13(R13, 100);
R15_ = Reactant_R15(R15, 100);
R16_ = Reactant_R16(R16, 100);
R17_ = Reactant_R17(R17, 100);
R18_ = Reactant_R18(R18, 100);
R19_ = Reactant_R19(R19, 100);
R23_ = Reactant_R23(R23, 100);
R24_ = Reactant_R24(R24, 100);
R25_ = Reactant_R25(R25, 100);
R26_ = Reactant_R26(R26, 100);
R27_ = Reactant_R27(R27, 100);
R28_ = Reactant_R28(R28, 100);
R29_ = Reactant_R29(R29, 100);
R30_ = Reactant_R30(R30, 100);
R31_ = Reactant_R31(R31, 100);
R32_ = Reactant_R32(R32, 100);
R33_ = Reactant_R33(R33, 100);
R34_ = Reactant_R34(R34, 100);
R35_ = Reactant_R35(R35, 100);
R36_ = Reactant_R36(R36, 100);
R37_ = Reactant_R37(R37, 100);
R39_ = Reactant_R39(R39, 100);
R41_ = Reactant_R41(R41, 100);
R42_ = Reactant_R42(R42, 100);
R44_ = Reactant_R44(R44, 100);
R45_ = Reactant_R45(R45, 100);
R46_ = Reactant_R46(R46, 100);
R47_ = Reactant_R47(R47, 100);
R48_ = Reactant_R48(R48, 100);
R49_ = Reactant_R49(R49, 100);
R50_ = Reactant_R50(R50, 100);
R51_ = Reactant_R51(R51, 100);
R52_ = Reactant_R52(R52, 100);
R53_ = Reactant_R53(R53, 100);
R55_ = Reactant_R55(R55, 100);
R56_ = Reactant_R56(R56, 100);
R57_ = Reactant_R57(R57, 100);
R58_ = Reactant_R58(R58, 100);
R59_ = Reactant_R59(R59, 100);
R60_ = Reactant_R60(R60, 100);
R61_ = Reactant_R61(R61, 100);
R63_ = Reactant_R63(R63, 100);
R64_ = Reactant_R64(R64, 100);
R65_ = Reactant_R65(R65, 100);
R66_ = Reactant_R66(R66, 100);
R67_ = Reactant_R67(R67, 100);
R68_ = Reactant_R68(R68, 100);
R69_ = Reactant_R69(R69, 100);
R70_ = Reactant_R70(R70, 100);
R71_ = Reactant_R71(R71, 100);
R72_ = Reactant_R72(R72, 100);
R73_ = Reactant_R73(R73, 100);
R74_ = Reactant_R74(R74, 100);
R75_ = Reactant_R75(R75, 100);
R76_ = Reactant_R76(R76, 100);
R77_ = Reactant_R77(R77, 100);
R78_ = Reactant_R78(R78, 100);
R79_ = Reactant_R79(R79, 100);
R80_ = Reactant_R80(R80, 100);
R81_ = Reactant_R81(R81, 100);
R82_ = Reactant_R82(R82, 100);
R83_ = Reactant_R83(R83, 100);
R84_ = Reactant_R84(R84, 100);
R85_ = Reactant_R85(R85, 100);
R86_ = Reactant_R86(R86, 100);
R87_ = Reactant_R87(R87, 100);
R88_ = Reactant_R88(R88, 100);
R90_ = Reactant_R90(R90, 100);
R91_ = Reactant_R91(R91, 100);
R92_ = Reactant_R92(R92, 100);



system R0_, R1_, R2_, R3_, R4_, R5_, R6_, R7_, R8_, R10_, R11_, R12_, R13_, R15_, R16_, R17_, R18_, R19_, R23_, R24_, R25_, R26_, R27_, R28_, R29_, R30_, R31_, R32_, R33_, R34_, R35_, R36_, R37_, R39_, R41_, R42_, R44_, R45_, R46_, R47_, R48_, R49_, R50_, R51_, R52_, R53_, R55_, R56_, R57_, R58_, R59_, R60_, R61_, R63_, R64_, R65_, R66_, R67_, R68_, R69_, R70_, R71_, R72_, R73_, R74_, R75_, R76_, R77_, R78_, R79_, R80_, R81_, R82_, R83_, R84_, R85_, R86_, R87_, R88_, R90_, R91_, R92_;

</system>
</nta>